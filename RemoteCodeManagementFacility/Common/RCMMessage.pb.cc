// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCMMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RCMMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RCMMessage {

namespace {

const ::google::protobuf::Descriptor* UploadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSearchResponse_fileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSearchResponse_fileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringSearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringSearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringSearchResponse_fileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringSearchResponse_fileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RCMMessage_2eproto() {
  protobuf_AddDesc_RCMMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RCMMessage.proto");
  GOOGLE_CHECK(file != NULL);
  UploadRequest_descriptor_ = file->message_type(0);
  static const int UploadRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, fileset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, fileend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, content_),
  };
  UploadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadRequest_descriptor_,
      UploadRequest::default_instance_,
      UploadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(UploadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, _internal_metadata_),
      -1);
  UploadResponse_descriptor_ = file->message_type(1);
  static const int UploadResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResponse, filename_),
  };
  UploadResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadResponse_descriptor_,
      UploadResponse::default_instance_,
      UploadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(UploadResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResponse, _internal_metadata_),
      -1);
  DownloadRequest_descriptor_ = file->message_type(2);
  static const int DownloadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, ip_),
  };
  DownloadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownloadRequest_descriptor_,
      DownloadRequest::default_instance_,
      DownloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DownloadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, _internal_metadata_),
      -1);
  DownloadResponse_descriptor_ = file->message_type(3);
  static const int DownloadResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResponse, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResponse, fileset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResponse, fileend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResponse, content_),
  };
  DownloadResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownloadResponse_descriptor_,
      DownloadResponse::default_instance_,
      DownloadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DownloadResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResponse, _internal_metadata_),
      -1);
  ListRequest_descriptor_ = file->message_type(4);
  static const int ListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, path_),
  };
  ListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRequest_descriptor_,
      ListRequest::default_instance_,
      ListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _internal_metadata_),
      -1);
  ListResponse_descriptor_ = file->message_type(5);
  static const int ListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, dirname_),
  };
  ListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListResponse_descriptor_,
      ListResponse::default_instance_,
      ListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _internal_metadata_),
      -1);
  FileSearchRequest_descriptor_ = file->message_type(6);
  static const int FileSearchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchRequest, filename_),
  };
  FileSearchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSearchRequest_descriptor_,
      FileSearchRequest::default_instance_,
      FileSearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(FileSearchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchRequest, _internal_metadata_),
      -1);
  FileSearchResponse_descriptor_ = file->message_type(7);
  static const int FileSearchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse, info_),
  };
  FileSearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSearchResponse_descriptor_,
      FileSearchResponse::default_instance_,
      FileSearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(FileSearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse, _internal_metadata_),
      -1);
  FileSearchResponse_fileInfo_descriptor_ = FileSearchResponse_descriptor_->nested_type(0);
  static const int FileSearchResponse_fileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse_fileInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse_fileInfo, ip_),
  };
  FileSearchResponse_fileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSearchResponse_fileInfo_descriptor_,
      FileSearchResponse_fileInfo::default_instance_,
      FileSearchResponse_fileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse_fileInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(FileSearchResponse_fileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSearchResponse_fileInfo, _internal_metadata_),
      -1);
  StringSearchRequest_descriptor_ = file->message_type(8);
  static const int StringSearchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchRequest, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchRequest, threadnum_),
  };
  StringSearchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringSearchRequest_descriptor_,
      StringSearchRequest::default_instance_,
      StringSearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringSearchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchRequest, _internal_metadata_),
      -1);
  StringSearchResponse_descriptor_ = file->message_type(9);
  static const int StringSearchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse, info_),
  };
  StringSearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringSearchResponse_descriptor_,
      StringSearchResponse::default_instance_,
      StringSearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringSearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse, _internal_metadata_),
      -1);
  StringSearchResponse_fileInfo_descriptor_ = StringSearchResponse_descriptor_->nested_type(0);
  static const int StringSearchResponse_fileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse_fileInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse_fileInfo, ip_),
  };
  StringSearchResponse_fileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringSearchResponse_fileInfo_descriptor_,
      StringSearchResponse_fileInfo::default_instance_,
      StringSearchResponse_fileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse_fileInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringSearchResponse_fileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringSearchResponse_fileInfo, _internal_metadata_),
      -1);
  Request_descriptor_ = file->message_type(10);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, upload_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, download_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, list_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, file_search_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, string_search_req_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(11);
  static const int Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, last_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, block_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, upload_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, download_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, list_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, file_search_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, string_search_res_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(12);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  MSG_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RCMMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadRequest_descriptor_, &UploadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadResponse_descriptor_, &UploadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownloadRequest_descriptor_, &DownloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownloadResponse_descriptor_, &DownloadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRequest_descriptor_, &ListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListResponse_descriptor_, &ListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSearchRequest_descriptor_, &FileSearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSearchResponse_descriptor_, &FileSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSearchResponse_fileInfo_descriptor_, &FileSearchResponse_fileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringSearchRequest_descriptor_, &StringSearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringSearchResponse_descriptor_, &StringSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringSearchResponse_fileInfo_descriptor_, &StringSearchResponse_fileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RCMMessage_2eproto() {
  delete UploadRequest::default_instance_;
  delete UploadRequest_reflection_;
  delete UploadResponse::default_instance_;
  delete UploadResponse_reflection_;
  delete DownloadRequest::default_instance_;
  delete DownloadRequest_reflection_;
  delete DownloadResponse::default_instance_;
  delete DownloadResponse_reflection_;
  delete ListRequest::default_instance_;
  delete ListRequest_reflection_;
  delete ListResponse::default_instance_;
  delete ListResponse_reflection_;
  delete FileSearchRequest::default_instance_;
  delete FileSearchRequest_reflection_;
  delete FileSearchResponse::default_instance_;
  delete FileSearchResponse_reflection_;
  delete FileSearchResponse_fileInfo::default_instance_;
  delete FileSearchResponse_fileInfo_reflection_;
  delete StringSearchRequest::default_instance_;
  delete StringSearchRequest_reflection_;
  delete StringSearchResponse::default_instance_;
  delete StringSearchResponse_reflection_;
  delete StringSearchResponse_fileInfo::default_instance_;
  delete StringSearchResponse_fileInfo_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_RCMMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RCMMessage.proto\022\nRCMMessage\"`\n\rUpload"
    "Request\022\020\n\010fileName\030\001 \002(\t\022\n\n\002IP\030\002 \002(\t\022\017\n"
    "\007fileSet\030\003 \002(\010\022\017\n\007fileEnd\030\004 \002(\010\022\017\n\007conte"
    "nt\030\005 \002(\014\"\"\n\016UploadResponse\022\020\n\010fileName\030\001"
    " \002(\t\"+\n\017DownloadRequest\022\014\n\004path\030\001 \002(\t\022\n\n"
    "\002IP\030\002 \002(\t\"S\n\020DownloadResponse\022\014\n\004path\030\001 "
    "\002(\t\022\017\n\007fileSet\030\002 \002(\010\022\017\n\007fileEnd\030\003 \002(\010\022\017\n"
    "\007content\030\004 \002(\014\"\'\n\013ListRequest\022\n\n\002IP\030\001 \002("
    "\t\022\014\n\004path\030\002 \002(\t\"\?\n\014ListResponse\022\014\n\004path\030"
    "\001 \002(\t\022\020\n\010fileName\030\002 \003(\t\022\017\n\007dirName\030\003 \003(\t"
    "\"%\n\021FileSearchRequest\022\020\n\010fileName\030\001 \002(\t\""
    "\203\001\n\022FileSearchResponse\022\020\n\010fileName\030\001 \002(\t"
    "\0225\n\004info\030\002 \003(\0132\'.RCMMessage.FileSearchRe"
    "sponse.fileInfo\032$\n\010fileInfo\022\014\n\004path\030\001 \002("
    "\t\022\n\n\002ip\030\002 \002(\t\"8\n\023StringSearchRequest\022\016\n\006"
    "search\030\001 \002(\t\022\021\n\tthreadNum\030\002 \002(\005\"\205\001\n\024Stri"
    "ngSearchResponse\022\016\n\006search\030\001 \002(\t\0227\n\004info"
    "\030\002 \003(\0132).RCMMessage.StringSearchResponse"
    ".fileInfo\032$\n\010fileInfo\022\014\n\004path\030\001 \002(\t\022\n\n\002i"
    "p\030\002 \002(\t\"\212\002\n\007Request\022-\n\nupload_req\030\001 \001(\0132"
    "\031.RCMMessage.UploadRequest\0221\n\014download_r"
    "eq\030\002 \001(\0132\033.RCMMessage.DownloadRequest\022)\n"
    "\010list_req\030\003 \001(\0132\027.RCMMessage.ListRequest"
    "\0226\n\017file_search_req\030\004 \001(\0132\035.RCMMessage.F"
    "ileSearchRequest\022:\n\021string_search_req\030\005 "
    "\001(\0132\037.RCMMessage.StringSearchRequest\"\344\002\n"
    "\010Response\022\016\n\006result\030\001 \002(\010\022\031\n\021error_descr"
    "iption\030\002 \001(\014\022\022\n\nlast_block\030\003 \002(\010\022\023\n\013bloc"
    "k_index\030\004 \002(\007\022.\n\nupload_res\030\005 \001(\0132\032.RCMM"
    "essage.UploadResponse\0222\n\014download_res\030\006 "
    "\001(\0132\034.RCMMessage.DownloadResponse\022*\n\010lis"
    "t_res\030\007 \001(\0132\030.RCMMessage.ListResponse\0227\n"
    "\017file_search_res\030\010 \001(\0132\036.RCMMessage.File"
    "SearchResponse\022;\n\021string_search_res\030\t \001("
    "\0132 .RCMMessage.StringSearchResponse\"\210\001\n\007"
    "Message\022\035\n\004type\030\001 \002(\0162\017.RCMMessage.MSG\022\020"
    "\n\010sequence\030\002 \002(\007\022$\n\007request\030\003 \001(\0132\023.RCMM"
    "essage.Request\022&\n\010response\030\004 \001(\0132\024.RCMMe"
    "ssage.Response*\364\001\n\003MSG\022\023\n\016Upload_Request"
    "\020\201 \022\024\n\017Upload_Response\020\202 \022\025\n\020Download_Re"
    "quest\020\203 \022\026\n\021Download_Response\020\204 \022\021\n\014List"
    "_Request\020\205 \022\022\n\rList_Response\020\206 \022\030\n\023File_"
    "Search_Request\020\207 \022\031\n\024File_Search_Respons"
    "e\020\210 \022\032\n\025String_Search_Request\020\211 \022\033\n\026Stri"
    "ng_Search_Response\020\220 ", 1781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RCMMessage.proto", &protobuf_RegisterTypes);
  UploadRequest::default_instance_ = new UploadRequest();
  UploadResponse::default_instance_ = new UploadResponse();
  DownloadRequest::default_instance_ = new DownloadRequest();
  DownloadResponse::default_instance_ = new DownloadResponse();
  ListRequest::default_instance_ = new ListRequest();
  ListResponse::default_instance_ = new ListResponse();
  FileSearchRequest::default_instance_ = new FileSearchRequest();
  FileSearchResponse::default_instance_ = new FileSearchResponse();
  FileSearchResponse_fileInfo::default_instance_ = new FileSearchResponse_fileInfo();
  StringSearchRequest::default_instance_ = new StringSearchRequest();
  StringSearchResponse::default_instance_ = new StringSearchResponse();
  StringSearchResponse_fileInfo::default_instance_ = new StringSearchResponse_fileInfo();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Message::default_instance_ = new Message();
  UploadRequest::default_instance_->InitAsDefaultInstance();
  UploadResponse::default_instance_->InitAsDefaultInstance();
  DownloadRequest::default_instance_->InitAsDefaultInstance();
  DownloadResponse::default_instance_->InitAsDefaultInstance();
  ListRequest::default_instance_->InitAsDefaultInstance();
  ListResponse::default_instance_->InitAsDefaultInstance();
  FileSearchRequest::default_instance_->InitAsDefaultInstance();
  FileSearchResponse::default_instance_->InitAsDefaultInstance();
  FileSearchResponse_fileInfo::default_instance_->InitAsDefaultInstance();
  StringSearchRequest::default_instance_->InitAsDefaultInstance();
  StringSearchResponse::default_instance_->InitAsDefaultInstance();
  StringSearchResponse_fileInfo::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RCMMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RCMMessage_2eproto {
  StaticDescriptorInitializer_RCMMessage_2eproto() {
    protobuf_AddDesc_RCMMessage_2eproto();
  }
} static_descriptor_initializer_RCMMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4112:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int UploadRequest::kFileNameFieldNumber;
const int UploadRequest::kIPFieldNumber;
const int UploadRequest::kFileSetFieldNumber;
const int UploadRequest::kFileEndFieldNumber;
const int UploadRequest::kContentFieldNumber;
#endif  // !_MSC_VER

UploadRequest::UploadRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.UploadRequest)
}

void UploadRequest::InitAsDefaultInstance() {
}

UploadRequest::UploadRequest(const UploadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.UploadRequest)
}

void UploadRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileset_ = false;
  fileend_ = false;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.UploadRequest)
  SharedDtor();
}

void UploadRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadRequest_descriptor_;
}

const UploadRequest& UploadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

UploadRequest* UploadRequest::default_instance_ = NULL;

UploadRequest* UploadRequest::New(::google::protobuf::Arena* arena) const {
  UploadRequest* n = new UploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UploadRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(fileset_, fileend_);
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.UploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.UploadRequest.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // required string IP = 2;
      case 2: {
        if (tag == 18) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.UploadRequest.IP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fileSet;
        break;
      }

      // required bool fileSet = 3;
      case 3: {
        if (tag == 24) {
         parse_fileSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fileset_)));
          set_has_fileset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fileEnd;
        break;
      }

      // required bool fileEnd = 4;
      case 4: {
        if (tag == 32) {
         parse_fileEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fileend_)));
          set_has_fileend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // required bytes content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.UploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.UploadRequest)
  return false;
#undef DO_
}

void UploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.UploadRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required bool fileSet = 3;
  if (has_fileset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fileset(), output);
  }

  // required bool fileEnd = 4;
  if (has_fileend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fileend(), output);
  }

  // required bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.UploadRequest)
}

::google::protobuf::uint8* UploadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.UploadRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required bool fileSet = 3;
  if (has_fileset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fileset(), target);
  }

  // required bool fileEnd = 4;
  if (has_fileend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fileend(), target);
  }

  // required bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.UploadRequest)
  return target;
}

int UploadRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_filename()) {
    // required string fileName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  if (has_ip()) {
    // required string IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_fileset()) {
    // required bool fileSet = 3;
    total_size += 1 + 1;
  }

  if (has_fileend()) {
    // required bool fileEnd = 4;
    total_size += 1 + 1;
  }

  if (has_content()) {
    // required bytes content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  return total_size;
}
int UploadRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string fileName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

    // required string IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required bool fileSet = 3;
    total_size += 1 + 1;

    // required bool fileEnd = 4;
    total_size += 1 + 1;

    // required bytes content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadRequest::MergeFrom(const UploadRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_fileset()) {
      set_fileset(from.fileset());
    }
    if (from.has_fileend()) {
      set_fileend(from.fileend());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UploadRequest::Swap(UploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadRequest::InternalSwap(UploadRequest* other) {
  filename_.Swap(&other->filename_);
  ip_.Swap(&other->ip_);
  std::swap(fileset_, other->fileset_);
  std::swap(fileend_, other->fileend_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadRequest_descriptor_;
  metadata.reflection = UploadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadRequest

// required string fileName = 1;
 bool UploadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UploadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void UploadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UploadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& UploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.fileName)
}
 void UploadRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadRequest.fileName)
}
 void UploadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadRequest.fileName)
}
 ::std::string* UploadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadRequest.fileName)
}

// required string IP = 2;
 bool UploadRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void UploadRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
 void UploadRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void UploadRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& UploadRequest::ip() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.IP)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.IP)
}
 void UploadRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadRequest.IP)
}
 void UploadRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadRequest.IP)
}
 ::std::string* UploadRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadRequest.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadRequest::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadRequest.IP)
}

// required bool fileSet = 3;
 bool UploadRequest::has_fileset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void UploadRequest::set_has_fileset() {
  _has_bits_[0] |= 0x00000004u;
}
 void UploadRequest::clear_has_fileset() {
  _has_bits_[0] &= ~0x00000004u;
}
 void UploadRequest::clear_fileset() {
  fileset_ = false;
  clear_has_fileset();
}
 bool UploadRequest::fileset() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.fileSet)
  return fileset_;
}
 void UploadRequest::set_fileset(bool value) {
  set_has_fileset();
  fileset_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.fileSet)
}

// required bool fileEnd = 4;
 bool UploadRequest::has_fileend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void UploadRequest::set_has_fileend() {
  _has_bits_[0] |= 0x00000008u;
}
 void UploadRequest::clear_has_fileend() {
  _has_bits_[0] &= ~0x00000008u;
}
 void UploadRequest::clear_fileend() {
  fileend_ = false;
  clear_has_fileend();
}
 bool UploadRequest::fileend() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.fileEnd)
  return fileend_;
}
 void UploadRequest::set_fileend(bool value) {
  set_has_fileend();
  fileend_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.fileEnd)
}

// required bytes content = 5;
 bool UploadRequest::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void UploadRequest::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
 void UploadRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
 void UploadRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& UploadRequest::content() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.content)
}
 void UploadRequest::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadRequest.content)
}
 void UploadRequest::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadRequest.content)
}
 ::std::string* UploadRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadRequest::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadRequest.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UploadResponse::kFileNameFieldNumber;
#endif  // !_MSC_VER

UploadResponse::UploadResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.UploadResponse)
}

void UploadResponse::InitAsDefaultInstance() {
}

UploadResponse::UploadResponse(const UploadResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.UploadResponse)
}

void UploadResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadResponse::~UploadResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.UploadResponse)
  SharedDtor();
}

void UploadResponse::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadResponse_descriptor_;
}

const UploadResponse& UploadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

UploadResponse* UploadResponse::default_instance_ = NULL;

UploadResponse* UploadResponse::New(::google::protobuf::Arena* arena) const {
  UploadResponse* n = new UploadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadResponse::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.UploadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.UploadResponse.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.UploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.UploadResponse)
  return false;
#undef DO_
}

void UploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.UploadResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadResponse.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.UploadResponse)
}

::google::protobuf::uint8* UploadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.UploadResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadResponse.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.UploadResponse)
  return target;
}

int UploadResponse::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadResponse::MergeFrom(const UploadResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UploadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadResponse::CopyFrom(const UploadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadResponse::Swap(UploadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadResponse::InternalSwap(UploadResponse* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadResponse_descriptor_;
  metadata.reflection = UploadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadResponse

// required string fileName = 1;
 bool UploadResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UploadResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void UploadResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UploadResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& UploadResponse::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadResponse.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadResponse.fileName)
}
 void UploadResponse::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadResponse.fileName)
}
 void UploadResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadResponse.fileName)
}
 ::std::string* UploadResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadResponse.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadResponse::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadResponse.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DownloadRequest::kPathFieldNumber;
const int DownloadRequest::kIPFieldNumber;
#endif  // !_MSC_VER

DownloadRequest::DownloadRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.DownloadRequest)
}

void DownloadRequest::InitAsDefaultInstance() {
}

DownloadRequest::DownloadRequest(const DownloadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.DownloadRequest)
}

void DownloadRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadRequest::~DownloadRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.DownloadRequest)
  SharedDtor();
}

void DownloadRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadRequest_descriptor_;
}

const DownloadRequest& DownloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

DownloadRequest* DownloadRequest::default_instance_ = NULL;

DownloadRequest* DownloadRequest::New(::google::protobuf::Arena* arena) const {
  DownloadRequest* n = new DownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.DownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.DownloadRequest.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // required string IP = 2;
      case 2: {
        if (tag == 18) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.DownloadRequest.IP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.DownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.DownloadRequest)
  return false;
#undef DO_
}

void DownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.DownloadRequest)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadRequest.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.DownloadRequest)
}

::google::protobuf::uint8* DownloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.DownloadRequest)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadRequest.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.DownloadRequest)
  return target;
}

int DownloadRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_path()) {
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_ip()) {
    // required string IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  return total_size;
}
int DownloadRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required string IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DownloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadRequest::MergeFrom(const DownloadRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadRequest::CopyFrom(const DownloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DownloadRequest::Swap(DownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadRequest::InternalSwap(DownloadRequest* other) {
  path_.Swap(&other->path_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadRequest_descriptor_;
  metadata.reflection = DownloadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadRequest

// required string path = 1;
 bool DownloadRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DownloadRequest::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
 void DownloadRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DownloadRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& DownloadRequest::path() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadRequest.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadRequest::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadRequest.path)
}
 void DownloadRequest::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.DownloadRequest.path)
}
 void DownloadRequest::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.DownloadRequest.path)
}
 ::std::string* DownloadRequest::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:RCMMessage.DownloadRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownloadRequest::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.DownloadRequest.path)
}

// required string IP = 2;
 bool DownloadRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DownloadRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
 void DownloadRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DownloadRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& DownloadRequest::ip() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadRequest.IP)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadRequest.IP)
}
 void DownloadRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.DownloadRequest.IP)
}
 void DownloadRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.DownloadRequest.IP)
}
 ::std::string* DownloadRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RCMMessage.DownloadRequest.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownloadRequest::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.DownloadRequest.IP)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DownloadResponse::kPathFieldNumber;
const int DownloadResponse::kFileSetFieldNumber;
const int DownloadResponse::kFileEndFieldNumber;
const int DownloadResponse::kContentFieldNumber;
#endif  // !_MSC_VER

DownloadResponse::DownloadResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.DownloadResponse)
}

void DownloadResponse::InitAsDefaultInstance() {
}

DownloadResponse::DownloadResponse(const DownloadResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.DownloadResponse)
}

void DownloadResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileset_ = false;
  fileend_ = false;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadResponse::~DownloadResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.DownloadResponse)
  SharedDtor();
}

void DownloadResponse::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadResponse_descriptor_;
}

const DownloadResponse& DownloadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

DownloadResponse* DownloadResponse::default_instance_ = NULL;

DownloadResponse* DownloadResponse::New(::google::protobuf::Arena* arena) const {
  DownloadResponse* n = new DownloadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DownloadResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(fileset_, fileend_);
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.DownloadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.DownloadResponse.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fileSet;
        break;
      }

      // required bool fileSet = 2;
      case 2: {
        if (tag == 16) {
         parse_fileSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fileset_)));
          set_has_fileset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fileEnd;
        break;
      }

      // required bool fileEnd = 3;
      case 3: {
        if (tag == 24) {
         parse_fileEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fileend_)));
          set_has_fileend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.DownloadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.DownloadResponse)
  return false;
#undef DO_
}

void DownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.DownloadResponse)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadResponse.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required bool fileSet = 2;
  if (has_fileset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fileset(), output);
  }

  // required bool fileEnd = 3;
  if (has_fileend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fileend(), output);
  }

  // required bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.DownloadResponse)
}

::google::protobuf::uint8* DownloadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.DownloadResponse)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadResponse.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required bool fileSet = 2;
  if (has_fileset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fileset(), target);
  }

  // required bool fileEnd = 3;
  if (has_fileend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fileend(), target);
  }

  // required bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.DownloadResponse)
  return target;
}

int DownloadResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_path()) {
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_fileset()) {
    // required bool fileSet = 2;
    total_size += 1 + 1;
  }

  if (has_fileend()) {
    // required bool fileEnd = 3;
    total_size += 1 + 1;
  }

  if (has_content()) {
    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  return total_size;
}
int DownloadResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required bool fileSet = 2;
    total_size += 1 + 1;

    // required bool fileEnd = 3;
    total_size += 1 + 1;

    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DownloadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadResponse::MergeFrom(const DownloadResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_fileset()) {
      set_fileset(from.fileset());
    }
    if (from.has_fileend()) {
      set_fileend(from.fileend());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadResponse::CopyFrom(const DownloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DownloadResponse::Swap(DownloadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadResponse::InternalSwap(DownloadResponse* other) {
  path_.Swap(&other->path_);
  std::swap(fileset_, other->fileset_);
  std::swap(fileend_, other->fileend_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadResponse_descriptor_;
  metadata.reflection = DownloadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadResponse

// required string path = 1;
 bool DownloadResponse::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DownloadResponse::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
 void DownloadResponse::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DownloadResponse::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& DownloadResponse::path() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadResponse.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadResponse::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadResponse.path)
}
 void DownloadResponse::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.DownloadResponse.path)
}
 void DownloadResponse::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.DownloadResponse.path)
}
 ::std::string* DownloadResponse::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:RCMMessage.DownloadResponse.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownloadResponse::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadResponse::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.DownloadResponse.path)
}

// required bool fileSet = 2;
 bool DownloadResponse::has_fileset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DownloadResponse::set_has_fileset() {
  _has_bits_[0] |= 0x00000002u;
}
 void DownloadResponse::clear_has_fileset() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DownloadResponse::clear_fileset() {
  fileset_ = false;
  clear_has_fileset();
}
 bool DownloadResponse::fileset() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadResponse.fileSet)
  return fileset_;
}
 void DownloadResponse::set_fileset(bool value) {
  set_has_fileset();
  fileset_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadResponse.fileSet)
}

// required bool fileEnd = 3;
 bool DownloadResponse::has_fileend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void DownloadResponse::set_has_fileend() {
  _has_bits_[0] |= 0x00000004u;
}
 void DownloadResponse::clear_has_fileend() {
  _has_bits_[0] &= ~0x00000004u;
}
 void DownloadResponse::clear_fileend() {
  fileend_ = false;
  clear_has_fileend();
}
 bool DownloadResponse::fileend() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadResponse.fileEnd)
  return fileend_;
}
 void DownloadResponse::set_fileend(bool value) {
  set_has_fileend();
  fileend_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadResponse.fileEnd)
}

// required bytes content = 4;
 bool DownloadResponse::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void DownloadResponse::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
 void DownloadResponse::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
 void DownloadResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& DownloadResponse::content() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadResponse.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadResponse::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadResponse.content)
}
 void DownloadResponse::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.DownloadResponse.content)
}
 void DownloadResponse::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.DownloadResponse.content)
}
 ::std::string* DownloadResponse::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:RCMMessage.DownloadResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownloadResponse::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.DownloadResponse.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ListRequest::kIPFieldNumber;
const int ListRequest::kPathFieldNumber;
#endif  // !_MSC_VER

ListRequest::ListRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.ListRequest)
}

void ListRequest::InitAsDefaultInstance() {
}

ListRequest::ListRequest(const ListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.ListRequest)
}

void ListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRequest::~ListRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.ListRequest)
  SharedDtor();
}

void ListRequest::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRequest_descriptor_;
}

const ListRequest& ListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

ListRequest* ListRequest::default_instance_ = NULL;

ListRequest* ListRequest::New(::google::protobuf::Arena* arena) const {
  ListRequest* n = new ListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.ListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string IP = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.ListRequest.IP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.ListRequest.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.ListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.ListRequest)
  return false;
#undef DO_
}

void ListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.ListRequest)
  // required string IP = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListRequest.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.ListRequest)
}

::google::protobuf::uint8* ListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.ListRequest)
  // required string IP = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListRequest.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.ListRequest)
  return target;
}

int ListRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_ip()) {
    // required string IP = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_path()) {
    // required string path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  return total_size;
}
int ListRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string IP = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required string path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ListRequest::Swap(ListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRequest::InternalSwap(ListRequest* other) {
  ip_.Swap(&other->ip_);
  path_.Swap(&other->path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRequest_descriptor_;
  metadata.reflection = ListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRequest

// required string IP = 1;
 bool ListRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ListRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
 void ListRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ListRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& ListRequest::ip() const {
  // @@protoc_insertion_point(field_get:RCMMessage.ListRequest.IP)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.ListRequest.IP)
}
 void ListRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.ListRequest.IP)
}
 void ListRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.ListRequest.IP)
}
 ::std::string* ListRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RCMMessage.ListRequest.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListRequest::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.ListRequest.IP)
}

// required string path = 2;
 bool ListRequest::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ListRequest::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
 void ListRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& ListRequest::path() const {
  // @@protoc_insertion_point(field_get:RCMMessage.ListRequest.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.ListRequest.path)
}
 void ListRequest::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.ListRequest.path)
}
 void ListRequest::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.ListRequest.path)
}
 ::std::string* ListRequest::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:RCMMessage.ListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListRequest::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.ListRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ListResponse::kPathFieldNumber;
const int ListResponse::kFileNameFieldNumber;
const int ListResponse::kDirNameFieldNumber;
#endif  // !_MSC_VER

ListResponse::ListResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.ListResponse)
}

void ListResponse::InitAsDefaultInstance() {
}

ListResponse::ListResponse(const ListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.ListResponse)
}

void ListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.ListResponse)
  SharedDtor();
}

void ListResponse::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListResponse_descriptor_;
}

const ListResponse& ListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

ListResponse* ListResponse::default_instance_ = NULL;

ListResponse* ListResponse::New(::google::protobuf::Arena* arena) const {
  ListResponse* n = new ListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListResponse::Clear() {
  if (has_path()) {
    path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filename_.Clear();
  dirname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.ListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.ListResponse.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // repeated string fileName = 2;
      case 2: {
        if (tag == 18) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename(this->filename_size() - 1).data(),
            this->filename(this->filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.ListResponse.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        if (input->ExpectTag(26)) goto parse_dirName;
        break;
      }

      // repeated string dirName = 3;
      case 3: {
        if (tag == 26) {
         parse_dirName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dirname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dirname(this->dirname_size() - 1).data(),
            this->dirname(this->dirname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.ListResponse.dirName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dirName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.ListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.ListResponse)
  return false;
#undef DO_
}

void ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.ListResponse)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListResponse.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated string fileName = 2;
  for (int i = 0; i < this->filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->filename(i).data(), this->filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "RCMMessage.ListResponse.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(i), output);
  }

  // repeated string dirName = 3;
  for (int i = 0; i < this->dirname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->dirname(i).data(), this->dirname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "RCMMessage.ListResponse.dirName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dirname(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.ListResponse)
}

::google::protobuf::uint8* ListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.ListResponse)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListResponse.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated string fileName = 2;
  for (int i = 0; i < this->filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename(i).data(), this->filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListResponse.fileName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->filename(i), target);
  }

  // repeated string dirName = 3;
  for (int i = 0; i < this->dirname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname(i).data(), this->dirname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListResponse.dirName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->dirname(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.ListResponse)
  return target;
}

int ListResponse::ByteSize() const {
  int total_size = 0;

  // required string path = 1;
  if (has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }
  // repeated string fileName = 2;
  total_size += 1 * this->filename_size();
  for (int i = 0; i < this->filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filename(i));
  }

  // repeated string dirName = 3;
  total_size += 1 * this->dirname_size();
  for (int i = 0; i < this->dirname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dirname(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListResponse::MergeFrom(const ListResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  filename_.MergeFrom(from.filename_);
  dirname_.MergeFrom(from.dirname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResponse::CopyFrom(const ListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListResponse::Swap(ListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListResponse::InternalSwap(ListResponse* other) {
  path_.Swap(&other->path_);
  filename_.UnsafeArenaSwap(&other->filename_);
  dirname_.UnsafeArenaSwap(&other->dirname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListResponse_descriptor_;
  metadata.reflection = ListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListResponse

// required string path = 1;
 bool ListResponse::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ListResponse::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
 void ListResponse::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ListResponse::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& ListResponse::path() const {
  // @@protoc_insertion_point(field_get:RCMMessage.ListResponse.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListResponse::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.ListResponse.path)
}
 void ListResponse::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.ListResponse.path)
}
 void ListResponse::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.ListResponse.path)
}
 ::std::string* ListResponse::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:RCMMessage.ListResponse.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListResponse::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListResponse::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.ListResponse.path)
}

// repeated string fileName = 2;
 int ListResponse::filename_size() const {
  return filename_.size();
}
 void ListResponse::clear_filename() {
  filename_.Clear();
}
 const ::std::string& ListResponse::filename(int index) const {
  // @@protoc_insertion_point(field_get:RCMMessage.ListResponse.fileName)
  return filename_.Get(index);
}
 ::std::string* ListResponse::mutable_filename(int index) {
  // @@protoc_insertion_point(field_mutable:RCMMessage.ListResponse.fileName)
  return filename_.Mutable(index);
}
 void ListResponse::set_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RCMMessage.ListResponse.fileName)
  filename_.Mutable(index)->assign(value);
}
 void ListResponse::set_filename(int index, const char* value) {
  filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RCMMessage.ListResponse.fileName)
}
 void ListResponse::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.ListResponse.fileName)
}
 ::std::string* ListResponse::add_filename() {
  return filename_.Add();
}
 void ListResponse::add_filename(const ::std::string& value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RCMMessage.ListResponse.fileName)
}
 void ListResponse::add_filename(const char* value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RCMMessage.ListResponse.fileName)
}
 void ListResponse::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RCMMessage.ListResponse.fileName)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListResponse::filename() const {
  // @@protoc_insertion_point(field_list:RCMMessage.ListResponse.fileName)
  return filename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ListResponse::mutable_filename() {
  // @@protoc_insertion_point(field_mutable_list:RCMMessage.ListResponse.fileName)
  return &filename_;
}

// repeated string dirName = 3;
 int ListResponse::dirname_size() const {
  return dirname_.size();
}
 void ListResponse::clear_dirname() {
  dirname_.Clear();
}
 const ::std::string& ListResponse::dirname(int index) const {
  // @@protoc_insertion_point(field_get:RCMMessage.ListResponse.dirName)
  return dirname_.Get(index);
}
 ::std::string* ListResponse::mutable_dirname(int index) {
  // @@protoc_insertion_point(field_mutable:RCMMessage.ListResponse.dirName)
  return dirname_.Mutable(index);
}
 void ListResponse::set_dirname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RCMMessage.ListResponse.dirName)
  dirname_.Mutable(index)->assign(value);
}
 void ListResponse::set_dirname(int index, const char* value) {
  dirname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RCMMessage.ListResponse.dirName)
}
 void ListResponse::set_dirname(int index, const char* value, size_t size) {
  dirname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.ListResponse.dirName)
}
 ::std::string* ListResponse::add_dirname() {
  return dirname_.Add();
}
 void ListResponse::add_dirname(const ::std::string& value) {
  dirname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RCMMessage.ListResponse.dirName)
}
 void ListResponse::add_dirname(const char* value) {
  dirname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RCMMessage.ListResponse.dirName)
}
 void ListResponse::add_dirname(const char* value, size_t size) {
  dirname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RCMMessage.ListResponse.dirName)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListResponse::dirname() const {
  // @@protoc_insertion_point(field_list:RCMMessage.ListResponse.dirName)
  return dirname_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ListResponse::mutable_dirname() {
  // @@protoc_insertion_point(field_mutable_list:RCMMessage.ListResponse.dirName)
  return &dirname_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FileSearchRequest::kFileNameFieldNumber;
#endif  // !_MSC_VER

FileSearchRequest::FileSearchRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.FileSearchRequest)
}

void FileSearchRequest::InitAsDefaultInstance() {
}

FileSearchRequest::FileSearchRequest(const FileSearchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.FileSearchRequest)
}

void FileSearchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSearchRequest::~FileSearchRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.FileSearchRequest)
  SharedDtor();
}

void FileSearchRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileSearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSearchRequest_descriptor_;
}

const FileSearchRequest& FileSearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

FileSearchRequest* FileSearchRequest::default_instance_ = NULL;

FileSearchRequest* FileSearchRequest::New(::google::protobuf::Arena* arena) const {
  FileSearchRequest* n = new FileSearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSearchRequest::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FileSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.FileSearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.FileSearchRequest.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.FileSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.FileSearchRequest)
  return false;
#undef DO_
}

void FileSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.FileSearchRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchRequest.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.FileSearchRequest)
}

::google::protobuf::uint8* FileSearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.FileSearchRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchRequest.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.FileSearchRequest)
  return target;
}

int FileSearchRequest::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileSearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSearchRequest::MergeFrom(const FileSearchRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FileSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSearchRequest::CopyFrom(const FileSearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileSearchRequest::Swap(FileSearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSearchRequest::InternalSwap(FileSearchRequest* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSearchRequest_descriptor_;
  metadata.reflection = FileSearchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSearchRequest

// required string fileName = 1;
 bool FileSearchRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FileSearchRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void FileSearchRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FileSearchRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& FileSearchRequest::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.FileSearchRequest.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.FileSearchRequest.fileName)
}
 void FileSearchRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.FileSearchRequest.fileName)
}
 void FileSearchRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.FileSearchRequest.fileName)
}
 ::std::string* FileSearchRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.FileSearchRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSearchRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.FileSearchRequest.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FileSearchResponse_fileInfo::kPathFieldNumber;
const int FileSearchResponse_fileInfo::kIpFieldNumber;
#endif  // !_MSC_VER

FileSearchResponse_fileInfo::FileSearchResponse_fileInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.FileSearchResponse.fileInfo)
}

void FileSearchResponse_fileInfo::InitAsDefaultInstance() {
}

FileSearchResponse_fileInfo::FileSearchResponse_fileInfo(const FileSearchResponse_fileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.FileSearchResponse.fileInfo)
}

void FileSearchResponse_fileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSearchResponse_fileInfo::~FileSearchResponse_fileInfo() {
  // @@protoc_insertion_point(destructor:RCMMessage.FileSearchResponse.fileInfo)
  SharedDtor();
}

void FileSearchResponse_fileInfo::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileSearchResponse_fileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSearchResponse_fileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSearchResponse_fileInfo_descriptor_;
}

const FileSearchResponse_fileInfo& FileSearchResponse_fileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

FileSearchResponse_fileInfo* FileSearchResponse_fileInfo::default_instance_ = NULL;

FileSearchResponse_fileInfo* FileSearchResponse_fileInfo::New(::google::protobuf::Arena* arena) const {
  FileSearchResponse_fileInfo* n = new FileSearchResponse_fileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSearchResponse_fileInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FileSearchResponse_fileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.FileSearchResponse.fileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.FileSearchResponse.fileInfo.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.FileSearchResponse.fileInfo.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.FileSearchResponse.fileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.FileSearchResponse.fileInfo)
  return false;
#undef DO_
}

void FileSearchResponse_fileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.FileSearchResponse.fileInfo)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchResponse.fileInfo.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchResponse.fileInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.FileSearchResponse.fileInfo)
}

::google::protobuf::uint8* FileSearchResponse_fileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.FileSearchResponse.fileInfo)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchResponse.fileInfo.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchResponse.fileInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.FileSearchResponse.fileInfo)
  return target;
}

int FileSearchResponse_fileInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_path()) {
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  return total_size;
}
int FileSearchResponse_fileInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSearchResponse_fileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileSearchResponse_fileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSearchResponse_fileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSearchResponse_fileInfo::MergeFrom(const FileSearchResponse_fileInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FileSearchResponse_fileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSearchResponse_fileInfo::CopyFrom(const FileSearchResponse_fileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSearchResponse_fileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileSearchResponse_fileInfo::Swap(FileSearchResponse_fileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSearchResponse_fileInfo::InternalSwap(FileSearchResponse_fileInfo* other) {
  path_.Swap(&other->path_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSearchResponse_fileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSearchResponse_fileInfo_descriptor_;
  metadata.reflection = FileSearchResponse_fileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileSearchResponse::kFileNameFieldNumber;
const int FileSearchResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

FileSearchResponse::FileSearchResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.FileSearchResponse)
}

void FileSearchResponse::InitAsDefaultInstance() {
}

FileSearchResponse::FileSearchResponse(const FileSearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.FileSearchResponse)
}

void FileSearchResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSearchResponse::~FileSearchResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.FileSearchResponse)
  SharedDtor();
}

void FileSearchResponse::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSearchResponse_descriptor_;
}

const FileSearchResponse& FileSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

FileSearchResponse* FileSearchResponse::default_instance_ = NULL;

FileSearchResponse* FileSearchResponse::New(::google::protobuf::Arena* arena) const {
  FileSearchResponse* n = new FileSearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSearchResponse::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FileSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.FileSearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.FileSearchResponse.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .RCMMessage.FileSearchResponse.fileInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.FileSearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.FileSearchResponse)
  return false;
#undef DO_
}

void FileSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.FileSearchResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchResponse.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // repeated .RCMMessage.FileSearchResponse.fileInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.FileSearchResponse)
}

::google::protobuf::uint8* FileSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.FileSearchResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.FileSearchResponse.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // repeated .RCMMessage.FileSearchResponse.fileInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.FileSearchResponse)
  return target;
}

int FileSearchResponse::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  // repeated .RCMMessage.FileSearchResponse.fileInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileSearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSearchResponse::MergeFrom(const FileSearchResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FileSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSearchResponse::CopyFrom(const FileSearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void FileSearchResponse::Swap(FileSearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSearchResponse::InternalSwap(FileSearchResponse* other) {
  filename_.Swap(&other->filename_);
  info_.UnsafeArenaSwap(&other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSearchResponse_descriptor_;
  metadata.reflection = FileSearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSearchResponse_fileInfo

// required string path = 1;
 bool FileSearchResponse_fileInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FileSearchResponse_fileInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
 void FileSearchResponse_fileInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FileSearchResponse_fileInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& FileSearchResponse_fileInfo::path() const {
  // @@protoc_insertion_point(field_get:RCMMessage.FileSearchResponse.fileInfo.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchResponse_fileInfo::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.FileSearchResponse.fileInfo.path)
}
 void FileSearchResponse_fileInfo::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.FileSearchResponse.fileInfo.path)
}
 void FileSearchResponse_fileInfo::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.FileSearchResponse.fileInfo.path)
}
 ::std::string* FileSearchResponse_fileInfo::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:RCMMessage.FileSearchResponse.fileInfo.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSearchResponse_fileInfo::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchResponse_fileInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.FileSearchResponse.fileInfo.path)
}

// required string ip = 2;
 bool FileSearchResponse_fileInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void FileSearchResponse_fileInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
 void FileSearchResponse_fileInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void FileSearchResponse_fileInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& FileSearchResponse_fileInfo::ip() const {
  // @@protoc_insertion_point(field_get:RCMMessage.FileSearchResponse.fileInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchResponse_fileInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.FileSearchResponse.fileInfo.ip)
}
 void FileSearchResponse_fileInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.FileSearchResponse.fileInfo.ip)
}
 void FileSearchResponse_fileInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.FileSearchResponse.fileInfo.ip)
}
 ::std::string* FileSearchResponse_fileInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RCMMessage.FileSearchResponse.fileInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSearchResponse_fileInfo::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchResponse_fileInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.FileSearchResponse.fileInfo.ip)
}

// -------------------------------------------------------------------

// FileSearchResponse

// required string fileName = 1;
 bool FileSearchResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void FileSearchResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void FileSearchResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void FileSearchResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& FileSearchResponse::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.FileSearchResponse.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.FileSearchResponse.fileName)
}
 void FileSearchResponse::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.FileSearchResponse.fileName)
}
 void FileSearchResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.FileSearchResponse.fileName)
}
 ::std::string* FileSearchResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.FileSearchResponse.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSearchResponse::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSearchResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.FileSearchResponse.fileName)
}

// repeated .RCMMessage.FileSearchResponse.fileInfo info = 2;
 int FileSearchResponse::info_size() const {
  return info_.size();
}
 void FileSearchResponse::clear_info() {
  info_.Clear();
}
 const ::RCMMessage::FileSearchResponse_fileInfo& FileSearchResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:RCMMessage.FileSearchResponse.info)
  return info_.Get(index);
}
 ::RCMMessage::FileSearchResponse_fileInfo* FileSearchResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:RCMMessage.FileSearchResponse.info)
  return info_.Mutable(index);
}
 ::RCMMessage::FileSearchResponse_fileInfo* FileSearchResponse::add_info() {
  // @@protoc_insertion_point(field_add:RCMMessage.FileSearchResponse.info)
  return info_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::RCMMessage::FileSearchResponse_fileInfo >&
FileSearchResponse::info() const {
  // @@protoc_insertion_point(field_list:RCMMessage.FileSearchResponse.info)
  return info_;
}
 ::google::protobuf::RepeatedPtrField< ::RCMMessage::FileSearchResponse_fileInfo >*
FileSearchResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:RCMMessage.FileSearchResponse.info)
  return &info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StringSearchRequest::kSearchFieldNumber;
const int StringSearchRequest::kThreadNumFieldNumber;
#endif  // !_MSC_VER

StringSearchRequest::StringSearchRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.StringSearchRequest)
}

void StringSearchRequest::InitAsDefaultInstance() {
}

StringSearchRequest::StringSearchRequest(const StringSearchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.StringSearchRequest)
}

void StringSearchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threadnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringSearchRequest::~StringSearchRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.StringSearchRequest)
  SharedDtor();
}

void StringSearchRequest::SharedDtor() {
  search_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringSearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringSearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringSearchRequest_descriptor_;
}

const StringSearchRequest& StringSearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

StringSearchRequest* StringSearchRequest::default_instance_ = NULL;

StringSearchRequest* StringSearchRequest::New(::google::protobuf::Arena* arena) const {
  StringSearchRequest* n = new StringSearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringSearchRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_search()) {
      search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    threadnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.StringSearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string search = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.StringSearchRequest.search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_threadNum;
        break;
      }

      // required int32 threadNum = 2;
      case 2: {
        if (tag == 16) {
         parse_threadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threadnum_)));
          set_has_threadnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.StringSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.StringSearchRequest)
  return false;
#undef DO_
}

void StringSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.StringSearchRequest)
  // required string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchRequest.search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  // required int32 threadNum = 2;
  if (has_threadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threadnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.StringSearchRequest)
}

::google::protobuf::uint8* StringSearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.StringSearchRequest)
  // required string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchRequest.search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  // required int32 threadNum = 2;
  if (has_threadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threadnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.StringSearchRequest)
  return target;
}

int StringSearchRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_search()) {
    // required string search = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search());
  }

  if (has_threadnum()) {
    // required int32 threadNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threadnum());
  }

  return total_size;
}
int StringSearchRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string search = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search());

    // required int32 threadNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threadnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StringSearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringSearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringSearchRequest::MergeFrom(const StringSearchRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search()) {
      set_has_search();
      search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
    }
    if (from.has_threadnum()) {
      set_threadnum(from.threadnum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringSearchRequest::CopyFrom(const StringSearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringSearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringSearchRequest::Swap(StringSearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringSearchRequest::InternalSwap(StringSearchRequest* other) {
  search_.Swap(&other->search_);
  std::swap(threadnum_, other->threadnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringSearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringSearchRequest_descriptor_;
  metadata.reflection = StringSearchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringSearchRequest

// required string search = 1;
 bool StringSearchRequest::has_search() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void StringSearchRequest::set_has_search() {
  _has_bits_[0] |= 0x00000001u;
}
 void StringSearchRequest::clear_has_search() {
  _has_bits_[0] &= ~0x00000001u;
}
 void StringSearchRequest::clear_search() {
  search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search();
}
 const ::std::string& StringSearchRequest::search() const {
  // @@protoc_insertion_point(field_get:RCMMessage.StringSearchRequest.search)
  return search_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchRequest::set_search(const ::std::string& value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.StringSearchRequest.search)
}
 void StringSearchRequest::set_search(const char* value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.StringSearchRequest.search)
}
 void StringSearchRequest::set_search(const char* value, size_t size) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.StringSearchRequest.search)
}
 ::std::string* StringSearchRequest::mutable_search() {
  set_has_search();
  // @@protoc_insertion_point(field_mutable:RCMMessage.StringSearchRequest.search)
  return search_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringSearchRequest::release_search() {
  clear_has_search();
  return search_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchRequest::set_allocated_search(::std::string* search) {
  if (search != NULL) {
    set_has_search();
  } else {
    clear_has_search();
  }
  search_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.StringSearchRequest.search)
}

// required int32 threadNum = 2;
 bool StringSearchRequest::has_threadnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void StringSearchRequest::set_has_threadnum() {
  _has_bits_[0] |= 0x00000002u;
}
 void StringSearchRequest::clear_has_threadnum() {
  _has_bits_[0] &= ~0x00000002u;
}
 void StringSearchRequest::clear_threadnum() {
  threadnum_ = 0;
  clear_has_threadnum();
}
 ::google::protobuf::int32 StringSearchRequest::threadnum() const {
  // @@protoc_insertion_point(field_get:RCMMessage.StringSearchRequest.threadNum)
  return threadnum_;
}
 void StringSearchRequest::set_threadnum(::google::protobuf::int32 value) {
  set_has_threadnum();
  threadnum_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.StringSearchRequest.threadNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StringSearchResponse_fileInfo::kPathFieldNumber;
const int StringSearchResponse_fileInfo::kIpFieldNumber;
#endif  // !_MSC_VER

StringSearchResponse_fileInfo::StringSearchResponse_fileInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.StringSearchResponse.fileInfo)
}

void StringSearchResponse_fileInfo::InitAsDefaultInstance() {
}

StringSearchResponse_fileInfo::StringSearchResponse_fileInfo(const StringSearchResponse_fileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.StringSearchResponse.fileInfo)
}

void StringSearchResponse_fileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringSearchResponse_fileInfo::~StringSearchResponse_fileInfo() {
  // @@protoc_insertion_point(destructor:RCMMessage.StringSearchResponse.fileInfo)
  SharedDtor();
}

void StringSearchResponse_fileInfo::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringSearchResponse_fileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringSearchResponse_fileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringSearchResponse_fileInfo_descriptor_;
}

const StringSearchResponse_fileInfo& StringSearchResponse_fileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

StringSearchResponse_fileInfo* StringSearchResponse_fileInfo::default_instance_ = NULL;

StringSearchResponse_fileInfo* StringSearchResponse_fileInfo::New(::google::protobuf::Arena* arena) const {
  StringSearchResponse_fileInfo* n = new StringSearchResponse_fileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringSearchResponse_fileInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringSearchResponse_fileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.StringSearchResponse.fileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.StringSearchResponse.fileInfo.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.StringSearchResponse.fileInfo.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.StringSearchResponse.fileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.StringSearchResponse.fileInfo)
  return false;
#undef DO_
}

void StringSearchResponse_fileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.StringSearchResponse.fileInfo)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchResponse.fileInfo.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchResponse.fileInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.StringSearchResponse.fileInfo)
}

::google::protobuf::uint8* StringSearchResponse_fileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.StringSearchResponse.fileInfo)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchResponse.fileInfo.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchResponse.fileInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.StringSearchResponse.fileInfo)
  return target;
}

int StringSearchResponse_fileInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_path()) {
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  return total_size;
}
int StringSearchResponse_fileInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required string ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringSearchResponse_fileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StringSearchResponse_fileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringSearchResponse_fileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringSearchResponse_fileInfo::MergeFrom(const StringSearchResponse_fileInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringSearchResponse_fileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringSearchResponse_fileInfo::CopyFrom(const StringSearchResponse_fileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringSearchResponse_fileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringSearchResponse_fileInfo::Swap(StringSearchResponse_fileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringSearchResponse_fileInfo::InternalSwap(StringSearchResponse_fileInfo* other) {
  path_.Swap(&other->path_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringSearchResponse_fileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringSearchResponse_fileInfo_descriptor_;
  metadata.reflection = StringSearchResponse_fileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StringSearchResponse::kSearchFieldNumber;
const int StringSearchResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

StringSearchResponse::StringSearchResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.StringSearchResponse)
}

void StringSearchResponse::InitAsDefaultInstance() {
}

StringSearchResponse::StringSearchResponse(const StringSearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.StringSearchResponse)
}

void StringSearchResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringSearchResponse::~StringSearchResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.StringSearchResponse)
  SharedDtor();
}

void StringSearchResponse::SharedDtor() {
  search_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringSearchResponse_descriptor_;
}

const StringSearchResponse& StringSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

StringSearchResponse* StringSearchResponse::default_instance_ = NULL;

StringSearchResponse* StringSearchResponse::New(::google::protobuf::Arena* arena) const {
  StringSearchResponse* n = new StringSearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringSearchResponse::Clear() {
  if (has_search()) {
    search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.StringSearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string search = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.StringSearchResponse.search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .RCMMessage.StringSearchResponse.fileInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.StringSearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.StringSearchResponse)
  return false;
#undef DO_
}

void StringSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.StringSearchResponse)
  // required string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchResponse.search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  // repeated .RCMMessage.StringSearchResponse.fileInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.StringSearchResponse)
}

::google::protobuf::uint8* StringSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.StringSearchResponse)
  // required string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.StringSearchResponse.search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  // repeated .RCMMessage.StringSearchResponse.fileInfo info = 2;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.StringSearchResponse)
  return target;
}

int StringSearchResponse::ByteSize() const {
  int total_size = 0;

  // required string search = 1;
  if (has_search()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search());
  }
  // repeated .RCMMessage.StringSearchResponse.fileInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StringSearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringSearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringSearchResponse::MergeFrom(const StringSearchResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search()) {
      set_has_search();
      search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringSearchResponse::CopyFrom(const StringSearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringSearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void StringSearchResponse::Swap(StringSearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringSearchResponse::InternalSwap(StringSearchResponse* other) {
  search_.Swap(&other->search_);
  info_.UnsafeArenaSwap(&other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringSearchResponse_descriptor_;
  metadata.reflection = StringSearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringSearchResponse_fileInfo

// required string path = 1;
 bool StringSearchResponse_fileInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void StringSearchResponse_fileInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
 void StringSearchResponse_fileInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
 void StringSearchResponse_fileInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& StringSearchResponse_fileInfo::path() const {
  // @@protoc_insertion_point(field_get:RCMMessage.StringSearchResponse.fileInfo.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchResponse_fileInfo::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.StringSearchResponse.fileInfo.path)
}
 void StringSearchResponse_fileInfo::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.StringSearchResponse.fileInfo.path)
}
 void StringSearchResponse_fileInfo::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.StringSearchResponse.fileInfo.path)
}
 ::std::string* StringSearchResponse_fileInfo::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:RCMMessage.StringSearchResponse.fileInfo.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringSearchResponse_fileInfo::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchResponse_fileInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.StringSearchResponse.fileInfo.path)
}

// required string ip = 2;
 bool StringSearchResponse_fileInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void StringSearchResponse_fileInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
 void StringSearchResponse_fileInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void StringSearchResponse_fileInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& StringSearchResponse_fileInfo::ip() const {
  // @@protoc_insertion_point(field_get:RCMMessage.StringSearchResponse.fileInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchResponse_fileInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.StringSearchResponse.fileInfo.ip)
}
 void StringSearchResponse_fileInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.StringSearchResponse.fileInfo.ip)
}
 void StringSearchResponse_fileInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.StringSearchResponse.fileInfo.ip)
}
 ::std::string* StringSearchResponse_fileInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RCMMessage.StringSearchResponse.fileInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringSearchResponse_fileInfo::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchResponse_fileInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.StringSearchResponse.fileInfo.ip)
}

// -------------------------------------------------------------------

// StringSearchResponse

// required string search = 1;
 bool StringSearchResponse::has_search() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void StringSearchResponse::set_has_search() {
  _has_bits_[0] |= 0x00000001u;
}
 void StringSearchResponse::clear_has_search() {
  _has_bits_[0] &= ~0x00000001u;
}
 void StringSearchResponse::clear_search() {
  search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search();
}
 const ::std::string& StringSearchResponse::search() const {
  // @@protoc_insertion_point(field_get:RCMMessage.StringSearchResponse.search)
  return search_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchResponse::set_search(const ::std::string& value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.StringSearchResponse.search)
}
 void StringSearchResponse::set_search(const char* value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.StringSearchResponse.search)
}
 void StringSearchResponse::set_search(const char* value, size_t size) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.StringSearchResponse.search)
}
 ::std::string* StringSearchResponse::mutable_search() {
  set_has_search();
  // @@protoc_insertion_point(field_mutable:RCMMessage.StringSearchResponse.search)
  return search_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringSearchResponse::release_search() {
  clear_has_search();
  return search_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringSearchResponse::set_allocated_search(::std::string* search) {
  if (search != NULL) {
    set_has_search();
  } else {
    clear_has_search();
  }
  search_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.StringSearchResponse.search)
}

// repeated .RCMMessage.StringSearchResponse.fileInfo info = 2;
 int StringSearchResponse::info_size() const {
  return info_.size();
}
 void StringSearchResponse::clear_info() {
  info_.Clear();
}
 const ::RCMMessage::StringSearchResponse_fileInfo& StringSearchResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:RCMMessage.StringSearchResponse.info)
  return info_.Get(index);
}
 ::RCMMessage::StringSearchResponse_fileInfo* StringSearchResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:RCMMessage.StringSearchResponse.info)
  return info_.Mutable(index);
}
 ::RCMMessage::StringSearchResponse_fileInfo* StringSearchResponse::add_info() {
  // @@protoc_insertion_point(field_add:RCMMessage.StringSearchResponse.info)
  return info_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::RCMMessage::StringSearchResponse_fileInfo >&
StringSearchResponse::info() const {
  // @@protoc_insertion_point(field_list:RCMMessage.StringSearchResponse.info)
  return info_;
}
 ::google::protobuf::RepeatedPtrField< ::RCMMessage::StringSearchResponse_fileInfo >*
StringSearchResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:RCMMessage.StringSearchResponse.info)
  return &info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Request::kUploadReqFieldNumber;
const int Request::kDownloadReqFieldNumber;
const int Request::kListReqFieldNumber;
const int Request::kFileSearchReqFieldNumber;
const int Request::kStringSearchReqFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.Request)
}

void Request::InitAsDefaultInstance() {
  upload_req_ = const_cast< ::RCMMessage::UploadRequest*>(&::RCMMessage::UploadRequest::default_instance());
  download_req_ = const_cast< ::RCMMessage::DownloadRequest*>(&::RCMMessage::DownloadRequest::default_instance());
  list_req_ = const_cast< ::RCMMessage::ListRequest*>(&::RCMMessage::ListRequest::default_instance());
  file_search_req_ = const_cast< ::RCMMessage::FileSearchRequest*>(&::RCMMessage::FileSearchRequest::default_instance());
  string_search_req_ = const_cast< ::RCMMessage::StringSearchRequest*>(&::RCMMessage::StringSearchRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  upload_req_ = NULL;
  download_req_ = NULL;
  list_req_ = NULL;
  file_search_req_ = NULL;
  string_search_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:RCMMessage.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete upload_req_;
    delete download_req_;
    delete list_req_;
    delete file_search_req_;
    delete string_search_req_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_upload_req()) {
      if (upload_req_ != NULL) upload_req_->::RCMMessage::UploadRequest::Clear();
    }
    if (has_download_req()) {
      if (download_req_ != NULL) download_req_->::RCMMessage::DownloadRequest::Clear();
    }
    if (has_list_req()) {
      if (list_req_ != NULL) list_req_->::RCMMessage::ListRequest::Clear();
    }
    if (has_file_search_req()) {
      if (file_search_req_ != NULL) file_search_req_->::RCMMessage::FileSearchRequest::Clear();
    }
    if (has_string_search_req()) {
      if (string_search_req_ != NULL) string_search_req_->::RCMMessage::StringSearchRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCMMessage.UploadRequest upload_req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_download_req;
        break;
      }

      // optional .RCMMessage.DownloadRequest download_req = 2;
      case 2: {
        if (tag == 18) {
         parse_download_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_req;
        break;
      }

      // optional .RCMMessage.ListRequest list_req = 3;
      case 3: {
        if (tag == 26) {
         parse_list_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_search_req;
        break;
      }

      // optional .RCMMessage.FileSearchRequest file_search_req = 4;
      case 4: {
        if (tag == 34) {
         parse_file_search_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_search_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_string_search_req;
        break;
      }

      // optional .RCMMessage.StringSearchRequest string_search_req = 5;
      case 5: {
        if (tag == 42) {
         parse_string_search_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_search_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.Request)
  // optional .RCMMessage.UploadRequest upload_req = 1;
  if (has_upload_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->upload_req_, output);
  }

  // optional .RCMMessage.DownloadRequest download_req = 2;
  if (has_download_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->download_req_, output);
  }

  // optional .RCMMessage.ListRequest list_req = 3;
  if (has_list_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->list_req_, output);
  }

  // optional .RCMMessage.FileSearchRequest file_search_req = 4;
  if (has_file_search_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->file_search_req_, output);
  }

  // optional .RCMMessage.StringSearchRequest string_search_req = 5;
  if (has_string_search_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->string_search_req_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.Request)
  // optional .RCMMessage.UploadRequest upload_req = 1;
  if (has_upload_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->upload_req_, target);
  }

  // optional .RCMMessage.DownloadRequest download_req = 2;
  if (has_download_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->download_req_, target);
  }

  // optional .RCMMessage.ListRequest list_req = 3;
  if (has_list_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->list_req_, target);
  }

  // optional .RCMMessage.FileSearchRequest file_search_req = 4;
  if (has_file_search_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->file_search_req_, target);
  }

  // optional .RCMMessage.StringSearchRequest string_search_req = 5;
  if (has_string_search_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->string_search_req_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional .RCMMessage.UploadRequest upload_req = 1;
    if (has_upload_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upload_req_);
    }

    // optional .RCMMessage.DownloadRequest download_req = 2;
    if (has_download_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->download_req_);
    }

    // optional .RCMMessage.ListRequest list_req = 3;
    if (has_list_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->list_req_);
    }

    // optional .RCMMessage.FileSearchRequest file_search_req = 4;
    if (has_file_search_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->file_search_req_);
    }

    // optional .RCMMessage.StringSearchRequest string_search_req = 5;
    if (has_string_search_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->string_search_req_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upload_req()) {
      mutable_upload_req()->::RCMMessage::UploadRequest::MergeFrom(from.upload_req());
    }
    if (from.has_download_req()) {
      mutable_download_req()->::RCMMessage::DownloadRequest::MergeFrom(from.download_req());
    }
    if (from.has_list_req()) {
      mutable_list_req()->::RCMMessage::ListRequest::MergeFrom(from.list_req());
    }
    if (from.has_file_search_req()) {
      mutable_file_search_req()->::RCMMessage::FileSearchRequest::MergeFrom(from.file_search_req());
    }
    if (from.has_string_search_req()) {
      mutable_string_search_req()->::RCMMessage::StringSearchRequest::MergeFrom(from.string_search_req());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_upload_req()) {
    if (!this->upload_req_->IsInitialized()) return false;
  }
  if (has_download_req()) {
    if (!this->download_req_->IsInitialized()) return false;
  }
  if (has_list_req()) {
    if (!this->list_req_->IsInitialized()) return false;
  }
  if (has_file_search_req()) {
    if (!this->file_search_req_->IsInitialized()) return false;
  }
  if (has_string_search_req()) {
    if (!this->string_search_req_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(upload_req_, other->upload_req_);
  std::swap(download_req_, other->download_req_);
  std::swap(list_req_, other->list_req_);
  std::swap(file_search_req_, other->file_search_req_);
  std::swap(string_search_req_, other->string_search_req_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .RCMMessage.UploadRequest upload_req = 1;
 bool Request::has_upload_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Request::set_has_upload_req() {
  _has_bits_[0] |= 0x00000001u;
}
 void Request::clear_has_upload_req() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Request::clear_upload_req() {
  if (upload_req_ != NULL) upload_req_->::RCMMessage::UploadRequest::Clear();
  clear_has_upload_req();
}
 const ::RCMMessage::UploadRequest& Request::upload_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.upload_req)
  return upload_req_ != NULL ? *upload_req_ : *default_instance_->upload_req_;
}
 ::RCMMessage::UploadRequest* Request::mutable_upload_req() {
  set_has_upload_req();
  if (upload_req_ == NULL) {
    upload_req_ = new ::RCMMessage::UploadRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.upload_req)
  return upload_req_;
}
 ::RCMMessage::UploadRequest* Request::release_upload_req() {
  clear_has_upload_req();
  ::RCMMessage::UploadRequest* temp = upload_req_;
  upload_req_ = NULL;
  return temp;
}
 void Request::set_allocated_upload_req(::RCMMessage::UploadRequest* upload_req) {
  delete upload_req_;
  upload_req_ = upload_req;
  if (upload_req) {
    set_has_upload_req();
  } else {
    clear_has_upload_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.upload_req)
}

// optional .RCMMessage.DownloadRequest download_req = 2;
 bool Request::has_download_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Request::set_has_download_req() {
  _has_bits_[0] |= 0x00000002u;
}
 void Request::clear_has_download_req() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Request::clear_download_req() {
  if (download_req_ != NULL) download_req_->::RCMMessage::DownloadRequest::Clear();
  clear_has_download_req();
}
 const ::RCMMessage::DownloadRequest& Request::download_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.download_req)
  return download_req_ != NULL ? *download_req_ : *default_instance_->download_req_;
}
 ::RCMMessage::DownloadRequest* Request::mutable_download_req() {
  set_has_download_req();
  if (download_req_ == NULL) {
    download_req_ = new ::RCMMessage::DownloadRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.download_req)
  return download_req_;
}
 ::RCMMessage::DownloadRequest* Request::release_download_req() {
  clear_has_download_req();
  ::RCMMessage::DownloadRequest* temp = download_req_;
  download_req_ = NULL;
  return temp;
}
 void Request::set_allocated_download_req(::RCMMessage::DownloadRequest* download_req) {
  delete download_req_;
  download_req_ = download_req;
  if (download_req) {
    set_has_download_req();
  } else {
    clear_has_download_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.download_req)
}

// optional .RCMMessage.ListRequest list_req = 3;
 bool Request::has_list_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Request::set_has_list_req() {
  _has_bits_[0] |= 0x00000004u;
}
 void Request::clear_has_list_req() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Request::clear_list_req() {
  if (list_req_ != NULL) list_req_->::RCMMessage::ListRequest::Clear();
  clear_has_list_req();
}
 const ::RCMMessage::ListRequest& Request::list_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.list_req)
  return list_req_ != NULL ? *list_req_ : *default_instance_->list_req_;
}
 ::RCMMessage::ListRequest* Request::mutable_list_req() {
  set_has_list_req();
  if (list_req_ == NULL) {
    list_req_ = new ::RCMMessage::ListRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.list_req)
  return list_req_;
}
 ::RCMMessage::ListRequest* Request::release_list_req() {
  clear_has_list_req();
  ::RCMMessage::ListRequest* temp = list_req_;
  list_req_ = NULL;
  return temp;
}
 void Request::set_allocated_list_req(::RCMMessage::ListRequest* list_req) {
  delete list_req_;
  list_req_ = list_req;
  if (list_req) {
    set_has_list_req();
  } else {
    clear_has_list_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.list_req)
}

// optional .RCMMessage.FileSearchRequest file_search_req = 4;
 bool Request::has_file_search_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Request::set_has_file_search_req() {
  _has_bits_[0] |= 0x00000008u;
}
 void Request::clear_has_file_search_req() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Request::clear_file_search_req() {
  if (file_search_req_ != NULL) file_search_req_->::RCMMessage::FileSearchRequest::Clear();
  clear_has_file_search_req();
}
 const ::RCMMessage::FileSearchRequest& Request::file_search_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.file_search_req)
  return file_search_req_ != NULL ? *file_search_req_ : *default_instance_->file_search_req_;
}
 ::RCMMessage::FileSearchRequest* Request::mutable_file_search_req() {
  set_has_file_search_req();
  if (file_search_req_ == NULL) {
    file_search_req_ = new ::RCMMessage::FileSearchRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.file_search_req)
  return file_search_req_;
}
 ::RCMMessage::FileSearchRequest* Request::release_file_search_req() {
  clear_has_file_search_req();
  ::RCMMessage::FileSearchRequest* temp = file_search_req_;
  file_search_req_ = NULL;
  return temp;
}
 void Request::set_allocated_file_search_req(::RCMMessage::FileSearchRequest* file_search_req) {
  delete file_search_req_;
  file_search_req_ = file_search_req;
  if (file_search_req) {
    set_has_file_search_req();
  } else {
    clear_has_file_search_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.file_search_req)
}

// optional .RCMMessage.StringSearchRequest string_search_req = 5;
 bool Request::has_string_search_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Request::set_has_string_search_req() {
  _has_bits_[0] |= 0x00000010u;
}
 void Request::clear_has_string_search_req() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Request::clear_string_search_req() {
  if (string_search_req_ != NULL) string_search_req_->::RCMMessage::StringSearchRequest::Clear();
  clear_has_string_search_req();
}
 const ::RCMMessage::StringSearchRequest& Request::string_search_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.string_search_req)
  return string_search_req_ != NULL ? *string_search_req_ : *default_instance_->string_search_req_;
}
 ::RCMMessage::StringSearchRequest* Request::mutable_string_search_req() {
  set_has_string_search_req();
  if (string_search_req_ == NULL) {
    string_search_req_ = new ::RCMMessage::StringSearchRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.string_search_req)
  return string_search_req_;
}
 ::RCMMessage::StringSearchRequest* Request::release_string_search_req() {
  clear_has_string_search_req();
  ::RCMMessage::StringSearchRequest* temp = string_search_req_;
  string_search_req_ = NULL;
  return temp;
}
 void Request::set_allocated_string_search_req(::RCMMessage::StringSearchRequest* string_search_req) {
  delete string_search_req_;
  string_search_req_ = string_search_req;
  if (string_search_req) {
    set_has_string_search_req();
  } else {
    clear_has_string_search_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.string_search_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Response::kResultFieldNumber;
const int Response::kErrorDescriptionFieldNumber;
const int Response::kLastBlockFieldNumber;
const int Response::kBlockIndexFieldNumber;
const int Response::kUploadResFieldNumber;
const int Response::kDownloadResFieldNumber;
const int Response::kListResFieldNumber;
const int Response::kFileSearchResFieldNumber;
const int Response::kStringSearchResFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.Response)
}

void Response::InitAsDefaultInstance() {
  upload_res_ = const_cast< ::RCMMessage::UploadResponse*>(&::RCMMessage::UploadResponse::default_instance());
  download_res_ = const_cast< ::RCMMessage::DownloadResponse*>(&::RCMMessage::DownloadResponse::default_instance());
  list_res_ = const_cast< ::RCMMessage::ListResponse*>(&::RCMMessage::ListResponse::default_instance());
  file_search_res_ = const_cast< ::RCMMessage::FileSearchResponse*>(&::RCMMessage::FileSearchResponse::default_instance());
  string_search_res_ = const_cast< ::RCMMessage::StringSearchResponse*>(&::RCMMessage::StringSearchResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  error_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_ = false;
  block_index_ = 0u;
  upload_res_ = NULL;
  download_res_ = NULL;
  list_res_ = NULL;
  file_search_res_ = NULL;
  string_search_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:RCMMessage.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  error_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete upload_res_;
    delete download_res_;
    delete list_res_;
    delete file_search_res_;
    delete string_search_res_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_, block_index_);
    if (has_error_description()) {
      error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_upload_res()) {
      if (upload_res_ != NULL) upload_res_->::RCMMessage::UploadResponse::Clear();
    }
    if (has_download_res()) {
      if (download_res_ != NULL) download_res_->::RCMMessage::DownloadResponse::Clear();
    }
    if (has_list_res()) {
      if (list_res_ != NULL) list_res_->::RCMMessage::ListResponse::Clear();
    }
    if (has_file_search_res()) {
      if (file_search_res_ != NULL) file_search_res_->::RCMMessage::FileSearchResponse::Clear();
    }
  }
  if (has_string_search_res()) {
    if (string_search_res_ != NULL) string_search_res_->::RCMMessage::StringSearchResponse::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_description;
        break;
      }

      // optional bytes error_description = 2;
      case 2: {
        if (tag == 18) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_block;
        break;
      }

      // required bool last_block = 3;
      case 3: {
        if (tag == 24) {
         parse_last_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_block_)));
          set_has_last_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_block_index;
        break;
      }

      // required fixed32 block_index = 4;
      case 4: {
        if (tag == 37) {
         parse_block_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &block_index_)));
          set_has_block_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upload_res;
        break;
      }

      // optional .RCMMessage.UploadResponse upload_res = 5;
      case 5: {
        if (tag == 42) {
         parse_upload_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_download_res;
        break;
      }

      // optional .RCMMessage.DownloadResponse download_res = 6;
      case 6: {
        if (tag == 50) {
         parse_download_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_list_res;
        break;
      }

      // optional .RCMMessage.ListResponse list_res = 7;
      case 7: {
        if (tag == 58) {
         parse_list_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_file_search_res;
        break;
      }

      // optional .RCMMessage.FileSearchResponse file_search_res = 8;
      case 8: {
        if (tag == 66) {
         parse_file_search_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_search_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_string_search_res;
        break;
      }

      // optional .RCMMessage.StringSearchResponse string_search_res = 9;
      case 9: {
        if (tag == 74) {
         parse_string_search_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_search_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.Response)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional bytes error_description = 2;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_description(), output);
  }

  // required bool last_block = 3;
  if (has_last_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last_block(), output);
  }

  // required fixed32 block_index = 4;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->block_index(), output);
  }

  // optional .RCMMessage.UploadResponse upload_res = 5;
  if (has_upload_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->upload_res_, output);
  }

  // optional .RCMMessage.DownloadResponse download_res = 6;
  if (has_download_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->download_res_, output);
  }

  // optional .RCMMessage.ListResponse list_res = 7;
  if (has_list_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->list_res_, output);
  }

  // optional .RCMMessage.FileSearchResponse file_search_res = 8;
  if (has_file_search_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->file_search_res_, output);
  }

  // optional .RCMMessage.StringSearchResponse string_search_res = 9;
  if (has_string_search_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->string_search_res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.Response)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional bytes error_description = 2;
  if (has_error_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_description(), target);
  }

  // required bool last_block = 3;
  if (has_last_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last_block(), target);
  }

  // required fixed32 block_index = 4;
  if (has_block_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->block_index(), target);
  }

  // optional .RCMMessage.UploadResponse upload_res = 5;
  if (has_upload_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->upload_res_, target);
  }

  // optional .RCMMessage.DownloadResponse download_res = 6;
  if (has_download_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->download_res_, target);
  }

  // optional .RCMMessage.ListResponse list_res = 7;
  if (has_list_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->list_res_, target);
  }

  // optional .RCMMessage.FileSearchResponse file_search_res = 8;
  if (has_file_search_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->file_search_res_, target);
  }

  // optional .RCMMessage.StringSearchResponse string_search_res = 9;
  if (has_string_search_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->string_search_res_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.Response)
  return target;
}

int Response::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_result()) {
    // required bool result = 1;
    total_size += 1 + 1;
  }

  if (has_last_block()) {
    // required bool last_block = 3;
    total_size += 1 + 1;
  }

  if (has_block_index()) {
    // required fixed32 block_index = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Response::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bool result = 1;
    total_size += 1 + 1;

    // required bool last_block = 3;
    total_size += 1 + 1;

    // required fixed32 block_index = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 242) {
    // optional bytes error_description = 2;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_description());
    }

    // optional .RCMMessage.UploadResponse upload_res = 5;
    if (has_upload_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upload_res_);
    }

    // optional .RCMMessage.DownloadResponse download_res = 6;
    if (has_download_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->download_res_);
    }

    // optional .RCMMessage.ListResponse list_res = 7;
    if (has_list_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->list_res_);
    }

    // optional .RCMMessage.FileSearchResponse file_search_res = 8;
    if (has_file_search_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->file_search_res_);
    }

  }
  // optional .RCMMessage.StringSearchResponse string_search_res = 9;
  if (has_string_search_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->string_search_res_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_description()) {
      set_has_error_description();
      error_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_description_);
    }
    if (from.has_last_block()) {
      set_last_block(from.last_block());
    }
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
    if (from.has_upload_res()) {
      mutable_upload_res()->::RCMMessage::UploadResponse::MergeFrom(from.upload_res());
    }
    if (from.has_download_res()) {
      mutable_download_res()->::RCMMessage::DownloadResponse::MergeFrom(from.download_res());
    }
    if (from.has_list_res()) {
      mutable_list_res()->::RCMMessage::ListResponse::MergeFrom(from.list_res());
    }
    if (from.has_file_search_res()) {
      mutable_file_search_res()->::RCMMessage::FileSearchResponse::MergeFrom(from.file_search_res());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_string_search_res()) {
      mutable_string_search_res()->::RCMMessage::StringSearchResponse::MergeFrom(from.string_search_res());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_upload_res()) {
    if (!this->upload_res_->IsInitialized()) return false;
  }
  if (has_download_res()) {
    if (!this->download_res_->IsInitialized()) return false;
  }
  if (has_list_res()) {
    if (!this->list_res_->IsInitialized()) return false;
  }
  if (has_file_search_res()) {
    if (!this->file_search_res_->IsInitialized()) return false;
  }
  if (has_string_search_res()) {
    if (!this->string_search_res_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(result_, other->result_);
  error_description_.Swap(&other->error_description_);
  std::swap(last_block_, other->last_block_);
  std::swap(block_index_, other->block_index_);
  std::swap(upload_res_, other->upload_res_);
  std::swap(download_res_, other->download_res_);
  std::swap(list_res_, other->list_res_);
  std::swap(file_search_res_, other->file_search_res_);
  std::swap(string_search_res_, other->string_search_res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// required bool result = 1;
 bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Response::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
 void Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Response::clear_result() {
  result_ = false;
  clear_has_result();
}
 bool Response::result() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.result)
  return result_;
}
 void Response::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Response.result)
}

// optional bytes error_description = 2;
 bool Response::has_error_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Response::set_has_error_description() {
  _has_bits_[0] |= 0x00000002u;
}
 void Response::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Response::clear_error_description() {
  error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_description();
}
 const ::std::string& Response::error_description() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.error_description)
  return error_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_error_description(const ::std::string& value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.Response.error_description)
}
 void Response::set_error_description(const char* value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.Response.error_description)
}
 void Response::set_error_description(const void* value, size_t size) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.Response.error_description)
}
 ::std::string* Response::mutable_error_description() {
  set_has_error_description();
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.error_description)
  return error_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_error_description() {
  clear_has_error_description();
  return error_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_error_description(::std::string* error_description) {
  if (error_description != NULL) {
    set_has_error_description();
  } else {
    clear_has_error_description();
  }
  error_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_description);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.error_description)
}

// required bool last_block = 3;
 bool Response::has_last_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Response::set_has_last_block() {
  _has_bits_[0] |= 0x00000004u;
}
 void Response::clear_has_last_block() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Response::clear_last_block() {
  last_block_ = false;
  clear_has_last_block();
}
 bool Response::last_block() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.last_block)
  return last_block_;
}
 void Response::set_last_block(bool value) {
  set_has_last_block();
  last_block_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Response.last_block)
}

// required fixed32 block_index = 4;
 bool Response::has_block_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Response::set_has_block_index() {
  _has_bits_[0] |= 0x00000008u;
}
 void Response::clear_has_block_index() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Response::clear_block_index() {
  block_index_ = 0u;
  clear_has_block_index();
}
 ::google::protobuf::uint32 Response::block_index() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.block_index)
  return block_index_;
}
 void Response::set_block_index(::google::protobuf::uint32 value) {
  set_has_block_index();
  block_index_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Response.block_index)
}

// optional .RCMMessage.UploadResponse upload_res = 5;
 bool Response::has_upload_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Response::set_has_upload_res() {
  _has_bits_[0] |= 0x00000010u;
}
 void Response::clear_has_upload_res() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Response::clear_upload_res() {
  if (upload_res_ != NULL) upload_res_->::RCMMessage::UploadResponse::Clear();
  clear_has_upload_res();
}
 const ::RCMMessage::UploadResponse& Response::upload_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.upload_res)
  return upload_res_ != NULL ? *upload_res_ : *default_instance_->upload_res_;
}
 ::RCMMessage::UploadResponse* Response::mutable_upload_res() {
  set_has_upload_res();
  if (upload_res_ == NULL) {
    upload_res_ = new ::RCMMessage::UploadResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.upload_res)
  return upload_res_;
}
 ::RCMMessage::UploadResponse* Response::release_upload_res() {
  clear_has_upload_res();
  ::RCMMessage::UploadResponse* temp = upload_res_;
  upload_res_ = NULL;
  return temp;
}
 void Response::set_allocated_upload_res(::RCMMessage::UploadResponse* upload_res) {
  delete upload_res_;
  upload_res_ = upload_res;
  if (upload_res) {
    set_has_upload_res();
  } else {
    clear_has_upload_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.upload_res)
}

// optional .RCMMessage.DownloadResponse download_res = 6;
 bool Response::has_download_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Response::set_has_download_res() {
  _has_bits_[0] |= 0x00000020u;
}
 void Response::clear_has_download_res() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Response::clear_download_res() {
  if (download_res_ != NULL) download_res_->::RCMMessage::DownloadResponse::Clear();
  clear_has_download_res();
}
 const ::RCMMessage::DownloadResponse& Response::download_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.download_res)
  return download_res_ != NULL ? *download_res_ : *default_instance_->download_res_;
}
 ::RCMMessage::DownloadResponse* Response::mutable_download_res() {
  set_has_download_res();
  if (download_res_ == NULL) {
    download_res_ = new ::RCMMessage::DownloadResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.download_res)
  return download_res_;
}
 ::RCMMessage::DownloadResponse* Response::release_download_res() {
  clear_has_download_res();
  ::RCMMessage::DownloadResponse* temp = download_res_;
  download_res_ = NULL;
  return temp;
}
 void Response::set_allocated_download_res(::RCMMessage::DownloadResponse* download_res) {
  delete download_res_;
  download_res_ = download_res;
  if (download_res) {
    set_has_download_res();
  } else {
    clear_has_download_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.download_res)
}

// optional .RCMMessage.ListResponse list_res = 7;
 bool Response::has_list_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Response::set_has_list_res() {
  _has_bits_[0] |= 0x00000040u;
}
 void Response::clear_has_list_res() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Response::clear_list_res() {
  if (list_res_ != NULL) list_res_->::RCMMessage::ListResponse::Clear();
  clear_has_list_res();
}
 const ::RCMMessage::ListResponse& Response::list_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.list_res)
  return list_res_ != NULL ? *list_res_ : *default_instance_->list_res_;
}
 ::RCMMessage::ListResponse* Response::mutable_list_res() {
  set_has_list_res();
  if (list_res_ == NULL) {
    list_res_ = new ::RCMMessage::ListResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.list_res)
  return list_res_;
}
 ::RCMMessage::ListResponse* Response::release_list_res() {
  clear_has_list_res();
  ::RCMMessage::ListResponse* temp = list_res_;
  list_res_ = NULL;
  return temp;
}
 void Response::set_allocated_list_res(::RCMMessage::ListResponse* list_res) {
  delete list_res_;
  list_res_ = list_res;
  if (list_res) {
    set_has_list_res();
  } else {
    clear_has_list_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.list_res)
}

// optional .RCMMessage.FileSearchResponse file_search_res = 8;
 bool Response::has_file_search_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Response::set_has_file_search_res() {
  _has_bits_[0] |= 0x00000080u;
}
 void Response::clear_has_file_search_res() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Response::clear_file_search_res() {
  if (file_search_res_ != NULL) file_search_res_->::RCMMessage::FileSearchResponse::Clear();
  clear_has_file_search_res();
}
 const ::RCMMessage::FileSearchResponse& Response::file_search_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.file_search_res)
  return file_search_res_ != NULL ? *file_search_res_ : *default_instance_->file_search_res_;
}
 ::RCMMessage::FileSearchResponse* Response::mutable_file_search_res() {
  set_has_file_search_res();
  if (file_search_res_ == NULL) {
    file_search_res_ = new ::RCMMessage::FileSearchResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.file_search_res)
  return file_search_res_;
}
 ::RCMMessage::FileSearchResponse* Response::release_file_search_res() {
  clear_has_file_search_res();
  ::RCMMessage::FileSearchResponse* temp = file_search_res_;
  file_search_res_ = NULL;
  return temp;
}
 void Response::set_allocated_file_search_res(::RCMMessage::FileSearchResponse* file_search_res) {
  delete file_search_res_;
  file_search_res_ = file_search_res;
  if (file_search_res) {
    set_has_file_search_res();
  } else {
    clear_has_file_search_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.file_search_res)
}

// optional .RCMMessage.StringSearchResponse string_search_res = 9;
 bool Response::has_string_search_res() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void Response::set_has_string_search_res() {
  _has_bits_[0] |= 0x00000100u;
}
 void Response::clear_has_string_search_res() {
  _has_bits_[0] &= ~0x00000100u;
}
 void Response::clear_string_search_res() {
  if (string_search_res_ != NULL) string_search_res_->::RCMMessage::StringSearchResponse::Clear();
  clear_has_string_search_res();
}
 const ::RCMMessage::StringSearchResponse& Response::string_search_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.string_search_res)
  return string_search_res_ != NULL ? *string_search_res_ : *default_instance_->string_search_res_;
}
 ::RCMMessage::StringSearchResponse* Response::mutable_string_search_res() {
  set_has_string_search_res();
  if (string_search_res_ == NULL) {
    string_search_res_ = new ::RCMMessage::StringSearchResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.string_search_res)
  return string_search_res_;
}
 ::RCMMessage::StringSearchResponse* Response::release_string_search_res() {
  clear_has_string_search_res();
  ::RCMMessage::StringSearchResponse* temp = string_search_res_;
  string_search_res_ = NULL;
  return temp;
}
 void Response::set_allocated_string_search_res(::RCMMessage::StringSearchResponse* string_search_res) {
  delete string_search_res_;
  string_search_res_ = string_search_res;
  if (string_search_res) {
    set_has_string_search_res();
  } else {
    clear_has_string_search_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.string_search_res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kSequenceFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.Message)
}

void Message::InitAsDefaultInstance() {
  request_ = const_cast< ::RCMMessage::Request*>(&::RCMMessage::Request::default_instance());
  response_ = const_cast< ::RCMMessage::Response*>(&::RCMMessage::Response::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 4097;
  sequence_ = 0u;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:RCMMessage.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 4097;
    sequence_ = 0u;
    if (has_request()) {
      if (request_ != NULL) request_->::RCMMessage::Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::RCMMessage::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RCMMessage.MSG type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCMMessage::MSG_IsValid(value)) {
            set_type(static_cast< ::RCMMessage::MSG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_sequence;
        break;
      }

      // required fixed32 sequence = 2;
      case 2: {
        if (tag == 21) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .RCMMessage.Request request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response;
        break;
      }

      // optional .RCMMessage.Response response = 4;
      case 4: {
        if (tag == 34) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.Message)
  // required .RCMMessage.MSG type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sequence(), output);
  }

  // optional .RCMMessage.Request request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_, output);
  }

  // optional .RCMMessage.Response response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.Message)
  // required .RCMMessage.MSG type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sequence(), target);
  }

  // optional .RCMMessage.Request request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->request_, target);
  }

  // optional .RCMMessage.Response response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->response_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.Message)
  return target;
}

int Message::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_type()) {
    // required .RCMMessage.MSG type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_sequence()) {
    // required fixed32 sequence = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int Message::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .RCMMessage.MSG type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required fixed32 sequence = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12) {
    // optional .RCMMessage.Request request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .RCMMessage.Response response = 4;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_request()) {
      mutable_request()->::RCMMessage::Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::RCMMessage::Response::MergeFrom(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  std::swap(sequence_, other->sequence_);
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .RCMMessage.MSG type = 1;
 bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
 void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Message::clear_type() {
  type_ = 4097;
  clear_has_type();
}
 ::RCMMessage::MSG Message::type() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.type)
  return static_cast< ::RCMMessage::MSG >(type_);
}
 void Message::set_type(::RCMMessage::MSG value) {
  assert(::RCMMessage::MSG_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Message.type)
}

// required fixed32 sequence = 2;
 bool Message::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Message::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
 void Message::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Message::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
 ::google::protobuf::uint32 Message::sequence() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.sequence)
  return sequence_;
}
 void Message::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Message.sequence)
}

// optional .RCMMessage.Request request = 3;
 bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Message::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
 void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Message::clear_request() {
  if (request_ != NULL) request_->::RCMMessage::Request::Clear();
  clear_has_request();
}
 const ::RCMMessage::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
 ::RCMMessage::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::RCMMessage::Request;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Message.request)
  return request_;
}
 ::RCMMessage::Request* Message::release_request() {
  clear_has_request();
  ::RCMMessage::Request* temp = request_;
  request_ = NULL;
  return temp;
}
 void Message::set_allocated_request(::RCMMessage::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Message.request)
}

// optional .RCMMessage.Response response = 4;
 bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Message::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
 void Message::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Message::clear_response() {
  if (response_ != NULL) response_->::RCMMessage::Response::Clear();
  clear_has_response();
}
 const ::RCMMessage::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
 ::RCMMessage::Response* Message::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::RCMMessage::Response;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Message.response)
  return response_;
}
 ::RCMMessage::Response* Message::release_response() {
  clear_has_response();
  ::RCMMessage::Response* temp = response_;
  response_ = NULL;
  return temp;
}
 void Message::set_allocated_response(::RCMMessage::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Message.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RCMMessage

// @@protoc_insertion_point(global_scope)
