// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCMMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RCMMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RCMMessage {

namespace {

const ::google::protobuf::Descriptor* UploadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownladResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownladResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LisrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LisrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RCMMessage_2eproto() {
  protobuf_AddDesc_RCMMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RCMMessage.proto");
  GOOGLE_CHECK(file != NULL);
  UploadRequest_descriptor_ = file->message_type(0);
  static const int UploadRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, fileset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, fileend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, content_),
  };
  UploadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadRequest_descriptor_,
      UploadRequest::default_instance_,
      UploadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(UploadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequest, _internal_metadata_),
      -1);
  UploadResponse_descriptor_ = file->message_type(1);
  static const int UploadResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResponse, filename_),
  };
  UploadResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UploadResponse_descriptor_,
      UploadResponse::default_instance_,
      UploadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(UploadResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResponse, _internal_metadata_),
      -1);
  DownloadRequest_descriptor_ = file->message_type(2);
  static const int DownloadRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, filename_),
  };
  DownloadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownloadRequest_descriptor_,
      DownloadRequest::default_instance_,
      DownloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DownloadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadRequest, _internal_metadata_),
      -1);
  DownladResponse_descriptor_ = file->message_type(3);
  static const int DownladResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownladResponse, iserror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownladResponse, errorinfo_),
  };
  DownladResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownladResponse_descriptor_,
      DownladResponse::default_instance_,
      DownladResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownladResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DownladResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownladResponse, _internal_metadata_),
      -1);
  ListRequest_descriptor_ = file->message_type(4);
  static const int ListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, filename_),
  };
  ListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRequest_descriptor_,
      ListRequest::default_instance_,
      ListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _internal_metadata_),
      -1);
  LisrResponse_descriptor_ = file->message_type(5);
  static const int LisrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LisrResponse, filename_),
  };
  LisrResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LisrResponse_descriptor_,
      LisrResponse::default_instance_,
      LisrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LisrResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(LisrResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LisrResponse, _internal_metadata_),
      -1);
  SearchRequest_descriptor_ = file->message_type(6);
  static const int SearchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, filename_),
  };
  SearchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(SearchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _internal_metadata_),
      -1);
  SearchResponse_descriptor_ = file->message_type(7);
  static const int SearchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, filename_),
  };
  SearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchResponse_descriptor_,
      SearchResponse::default_instance_,
      SearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(SearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _internal_metadata_),
      -1);
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, upload_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, download_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, list_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, search_req_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(9);
  static const int Response_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, last_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, block_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, upload_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, download_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, list_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, search_res_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(10);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  MSG_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RCMMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadRequest_descriptor_, &UploadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UploadResponse_descriptor_, &UploadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownloadRequest_descriptor_, &DownloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownladResponse_descriptor_, &DownladResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRequest_descriptor_, &ListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LisrResponse_descriptor_, &LisrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchResponse_descriptor_, &SearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RCMMessage_2eproto() {
  delete UploadRequest::default_instance_;
  delete UploadRequest_reflection_;
  delete UploadResponse::default_instance_;
  delete UploadResponse_reflection_;
  delete DownloadRequest::default_instance_;
  delete DownloadRequest_reflection_;
  delete DownladResponse::default_instance_;
  delete DownladResponse_reflection_;
  delete ListRequest::default_instance_;
  delete ListRequest_reflection_;
  delete LisrResponse::default_instance_;
  delete LisrResponse_reflection_;
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete SearchResponse::default_instance_;
  delete SearchResponse_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_RCMMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RCMMessage.proto\022\nRCMMessage\"`\n\rUpload"
    "Request\022\020\n\010fileName\030\001 \002(\t\022\n\n\002IP\030\002 \002(\t\022\017\n"
    "\007fileSet\030\003 \002(\010\022\017\n\007fileEnd\030\004 \002(\010\022\017\n\007conte"
    "nt\030\005 \002(\014\"\"\n\016UploadResponse\022\020\n\010fileName\030\001"
    " \002(\t\"#\n\017DownloadRequest\022\020\n\010fileName\030\001 \002("
    "\t\"5\n\017DownladResponse\022\017\n\007isError\030\001 \002(\005\022\021\n"
    "\terrorInfo\030\002 \001(\t\"\037\n\013ListRequest\022\020\n\010fileN"
    "ame\030\001 \002(\t\" \n\014LisrResponse\022\020\n\010fileName\030\001 "
    "\002(\t\"!\n\rSearchRequest\022\020\n\010fileName\030\001 \002(\t\"\""
    "\n\016SearchResponse\022\020\n\010fileName\030\001 \002(\t\"\305\001\n\007R"
    "equest\022-\n\nupload_req\030\001 \001(\0132\031.RCMMessage."
    "UploadRequest\0221\n\014download_req\030\002 \001(\0132\033.RC"
    "MMessage.DownloadRequest\022)\n\010list_req\030\003 \001"
    "(\0132\027.RCMMessage.ListRequest\022-\n\nsearch_re"
    "q\030\004 \001(\0132\031.RCMMessage.SearchRequest\"\235\002\n\010R"
    "esponse\022\016\n\006result\030\001 \002(\010\022\031\n\021error_descrip"
    "tion\030\002 \001(\014\022\022\n\nlast_block\030\003 \002(\010\022\023\n\013block_"
    "index\030\004 \002(\007\022.\n\nupload_res\030\005 \001(\0132\032.RCMMes"
    "sage.UploadResponse\0221\n\014download_res\030\006 \001("
    "\0132\033.RCMMessage.DownladResponse\022*\n\010list_r"
    "es\030\007 \001(\0132\030.RCMMessage.LisrResponse\022.\n\nse"
    "arch_res\030\010 \001(\0132\032.RCMMessage.SearchRespon"
    "se\"\210\001\n\007Message\022\035\n\004type\030\001 \002(\0162\017.RCMMessag"
    "e.MSG\022\020\n\010sequence\030\002 \002(\007\022$\n\007request\030\003 \001(\013"
    "2\023.RCMMessage.Request\022&\n\010response\030\004 \001(\0132"
    "\024.RCMMessage.Response*\330\001\n\003MSG\022\023\n\016Upload_"
    "Request\020\201 \022\024\n\017Upload_Response\020\202 \022\025\n\020Down"
    "load_Request\020\203 \022\026\n\021Download_Response\020\204 \022"
    "\021\n\014List_Request\020\205 \022\022\n\rList_Response\020\206 \022\021"
    "\n\014Find_Request\020\207 \022\022\n\rFind_Response\020\210 \022\023\n"
    "\016Search_Request\020\211 \022\024\n\017Search_Response\020\220 ", 1240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RCMMessage.proto", &protobuf_RegisterTypes);
  UploadRequest::default_instance_ = new UploadRequest();
  UploadResponse::default_instance_ = new UploadResponse();
  DownloadRequest::default_instance_ = new DownloadRequest();
  DownladResponse::default_instance_ = new DownladResponse();
  ListRequest::default_instance_ = new ListRequest();
  LisrResponse::default_instance_ = new LisrResponse();
  SearchRequest::default_instance_ = new SearchRequest();
  SearchResponse::default_instance_ = new SearchResponse();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Message::default_instance_ = new Message();
  UploadRequest::default_instance_->InitAsDefaultInstance();
  UploadResponse::default_instance_->InitAsDefaultInstance();
  DownloadRequest::default_instance_->InitAsDefaultInstance();
  DownladResponse::default_instance_->InitAsDefaultInstance();
  ListRequest::default_instance_->InitAsDefaultInstance();
  LisrResponse::default_instance_->InitAsDefaultInstance();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  SearchResponse::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RCMMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RCMMessage_2eproto {
  StaticDescriptorInitializer_RCMMessage_2eproto() {
    protobuf_AddDesc_RCMMessage_2eproto();
  }
} static_descriptor_initializer_RCMMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4112:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int UploadRequest::kFileNameFieldNumber;
const int UploadRequest::kIPFieldNumber;
const int UploadRequest::kFileSetFieldNumber;
const int UploadRequest::kFileEndFieldNumber;
const int UploadRequest::kContentFieldNumber;
#endif  // !_MSC_VER

UploadRequest::UploadRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.UploadRequest)
}

void UploadRequest::InitAsDefaultInstance() {
}

UploadRequest::UploadRequest(const UploadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.UploadRequest)
}

void UploadRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileset_ = false;
  fileend_ = false;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.UploadRequest)
  SharedDtor();
}

void UploadRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadRequest_descriptor_;
}

const UploadRequest& UploadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

UploadRequest* UploadRequest::default_instance_ = NULL;

UploadRequest* UploadRequest::New(::google::protobuf::Arena* arena) const {
  UploadRequest* n = new UploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UploadRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(fileset_, fileend_);
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.UploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.UploadRequest.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // required string IP = 2;
      case 2: {
        if (tag == 18) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.UploadRequest.IP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fileSet;
        break;
      }

      // required bool fileSet = 3;
      case 3: {
        if (tag == 24) {
         parse_fileSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fileset_)));
          set_has_fileset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fileEnd;
        break;
      }

      // required bool fileEnd = 4;
      case 4: {
        if (tag == 32) {
         parse_fileEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fileend_)));
          set_has_fileend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // required bytes content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.UploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.UploadRequest)
  return false;
#undef DO_
}

void UploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.UploadRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required bool fileSet = 3;
  if (has_fileset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fileset(), output);
  }

  // required bool fileEnd = 4;
  if (has_fileend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fileend(), output);
  }

  // required bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.UploadRequest)
}

::google::protobuf::uint8* UploadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.UploadRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadRequest.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required bool fileSet = 3;
  if (has_fileset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fileset(), target);
  }

  // required bool fileEnd = 4;
  if (has_fileend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fileend(), target);
  }

  // required bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.UploadRequest)
  return target;
}

int UploadRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_filename()) {
    // required string fileName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  if (has_ip()) {
    // required string IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_fileset()) {
    // required bool fileSet = 3;
    total_size += 1 + 1;
  }

  if (has_fileend()) {
    // required bool fileEnd = 4;
    total_size += 1 + 1;
  }

  if (has_content()) {
    // required bytes content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  return total_size;
}
int UploadRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string fileName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

    // required string IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required bool fileSet = 3;
    total_size += 1 + 1;

    // required bool fileEnd = 4;
    total_size += 1 + 1;

    // required bytes content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadRequest::MergeFrom(const UploadRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_fileset()) {
      set_fileset(from.fileset());
    }
    if (from.has_fileend()) {
      set_fileend(from.fileend());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UploadRequest::Swap(UploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadRequest::InternalSwap(UploadRequest* other) {
  filename_.Swap(&other->filename_);
  ip_.Swap(&other->ip_);
  std::swap(fileset_, other->fileset_);
  std::swap(fileend_, other->fileend_);
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadRequest_descriptor_;
  metadata.reflection = UploadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadRequest

// required string fileName = 1;
 bool UploadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UploadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void UploadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UploadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& UploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.fileName)
}
 void UploadRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadRequest.fileName)
}
 void UploadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadRequest.fileName)
}
 ::std::string* UploadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadRequest.fileName)
}

// required string IP = 2;
 bool UploadRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void UploadRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
 void UploadRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
 void UploadRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& UploadRequest::ip() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.IP)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.IP)
}
 void UploadRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadRequest.IP)
}
 void UploadRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadRequest.IP)
}
 ::std::string* UploadRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadRequest.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadRequest::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadRequest.IP)
}

// required bool fileSet = 3;
 bool UploadRequest::has_fileset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void UploadRequest::set_has_fileset() {
  _has_bits_[0] |= 0x00000004u;
}
 void UploadRequest::clear_has_fileset() {
  _has_bits_[0] &= ~0x00000004u;
}
 void UploadRequest::clear_fileset() {
  fileset_ = false;
  clear_has_fileset();
}
 bool UploadRequest::fileset() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.fileSet)
  return fileset_;
}
 void UploadRequest::set_fileset(bool value) {
  set_has_fileset();
  fileset_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.fileSet)
}

// required bool fileEnd = 4;
 bool UploadRequest::has_fileend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void UploadRequest::set_has_fileend() {
  _has_bits_[0] |= 0x00000008u;
}
 void UploadRequest::clear_has_fileend() {
  _has_bits_[0] &= ~0x00000008u;
}
 void UploadRequest::clear_fileend() {
  fileend_ = false;
  clear_has_fileend();
}
 bool UploadRequest::fileend() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.fileEnd)
  return fileend_;
}
 void UploadRequest::set_fileend(bool value) {
  set_has_fileend();
  fileend_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.fileEnd)
}

// required bytes content = 5;
 bool UploadRequest::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void UploadRequest::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
 void UploadRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
 void UploadRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& UploadRequest::content() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadRequest.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadRequest.content)
}
 void UploadRequest::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadRequest.content)
}
 void UploadRequest::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadRequest.content)
}
 ::std::string* UploadRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadRequest::release_content() {
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadRequest.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UploadResponse::kFileNameFieldNumber;
#endif  // !_MSC_VER

UploadResponse::UploadResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.UploadResponse)
}

void UploadResponse::InitAsDefaultInstance() {
}

UploadResponse::UploadResponse(const UploadResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.UploadResponse)
}

void UploadResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadResponse::~UploadResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.UploadResponse)
  SharedDtor();
}

void UploadResponse::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UploadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadResponse_descriptor_;
}

const UploadResponse& UploadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

UploadResponse* UploadResponse::default_instance_ = NULL;

UploadResponse* UploadResponse::New(::google::protobuf::Arena* arena) const {
  UploadResponse* n = new UploadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadResponse::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.UploadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.UploadResponse.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.UploadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.UploadResponse)
  return false;
#undef DO_
}

void UploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.UploadResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadResponse.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.UploadResponse)
}

::google::protobuf::uint8* UploadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.UploadResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.UploadResponse.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.UploadResponse)
  return target;
}

int UploadResponse::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UploadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadResponse::MergeFrom(const UploadResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UploadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadResponse::CopyFrom(const UploadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadResponse::Swap(UploadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadResponse::InternalSwap(UploadResponse* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadResponse_descriptor_;
  metadata.reflection = UploadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadResponse

// required string fileName = 1;
 bool UploadResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void UploadResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void UploadResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void UploadResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& UploadResponse::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.UploadResponse.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.UploadResponse.fileName)
}
 void UploadResponse::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.UploadResponse.fileName)
}
 void UploadResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.UploadResponse.fileName)
}
 ::std::string* UploadResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.UploadResponse.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadResponse::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.UploadResponse.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DownloadRequest::kFileNameFieldNumber;
#endif  // !_MSC_VER

DownloadRequest::DownloadRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.DownloadRequest)
}

void DownloadRequest::InitAsDefaultInstance() {
}

DownloadRequest::DownloadRequest(const DownloadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.DownloadRequest)
}

void DownloadRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadRequest::~DownloadRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.DownloadRequest)
  SharedDtor();
}

void DownloadRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadRequest_descriptor_;
}

const DownloadRequest& DownloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

DownloadRequest* DownloadRequest::default_instance_ = NULL;

DownloadRequest* DownloadRequest::New(::google::protobuf::Arena* arena) const {
  DownloadRequest* n = new DownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadRequest::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.DownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.DownloadRequest.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.DownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.DownloadRequest)
  return false;
#undef DO_
}

void DownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.DownloadRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadRequest.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.DownloadRequest)
}

::google::protobuf::uint8* DownloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.DownloadRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownloadRequest.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.DownloadRequest)
  return target;
}

int DownloadRequest::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DownloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadRequest::MergeFrom(const DownloadRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadRequest::CopyFrom(const DownloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DownloadRequest::Swap(DownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadRequest::InternalSwap(DownloadRequest* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadRequest_descriptor_;
  metadata.reflection = DownloadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadRequest

// required string fileName = 1;
 bool DownloadRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DownloadRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void DownloadRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DownloadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& DownloadRequest::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownloadRequest.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.DownloadRequest.fileName)
}
 void DownloadRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.DownloadRequest.fileName)
}
 void DownloadRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.DownloadRequest.fileName)
}
 ::std::string* DownloadRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.DownloadRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownloadRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownloadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.DownloadRequest.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DownladResponse::kIsErrorFieldNumber;
const int DownladResponse::kErrorInfoFieldNumber;
#endif  // !_MSC_VER

DownladResponse::DownladResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.DownladResponse)
}

void DownladResponse::InitAsDefaultInstance() {
}

DownladResponse::DownladResponse(const DownladResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.DownladResponse)
}

void DownladResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iserror_ = 0;
  errorinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownladResponse::~DownladResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.DownladResponse)
  SharedDtor();
}

void DownladResponse::SharedDtor() {
  errorinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DownladResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownladResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownladResponse_descriptor_;
}

const DownladResponse& DownladResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

DownladResponse* DownladResponse::default_instance_ = NULL;

DownladResponse* DownladResponse::New(::google::protobuf::Arena* arena) const {
  DownladResponse* n = new DownladResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownladResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    iserror_ = 0;
    if (has_errorinfo()) {
      errorinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DownladResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.DownladResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isError = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iserror_)));
          set_has_iserror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorInfo;
        break;
      }

      // optional string errorInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_errorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errorinfo().data(), this->errorinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.DownladResponse.errorInfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.DownladResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.DownladResponse)
  return false;
#undef DO_
}

void DownladResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.DownladResponse)
  // required int32 isError = 1;
  if (has_iserror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iserror(), output);
  }

  // optional string errorInfo = 2;
  if (has_errorinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errorinfo().data(), this->errorinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownladResponse.errorInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errorinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.DownladResponse)
}

::google::protobuf::uint8* DownladResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.DownladResponse)
  // required int32 isError = 1;
  if (has_iserror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iserror(), target);
  }

  // optional string errorInfo = 2;
  if (has_errorinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errorinfo().data(), this->errorinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.DownladResponse.errorInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errorinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.DownladResponse)
  return target;
}

int DownladResponse::ByteSize() const {
  int total_size = 0;

  // required int32 isError = 1;
  if (has_iserror()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iserror());
  }
  // optional string errorInfo = 2;
  if (has_errorinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errorinfo());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownladResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DownladResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownladResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownladResponse::MergeFrom(const DownladResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iserror()) {
      set_iserror(from.iserror());
    }
    if (from.has_errorinfo()) {
      set_has_errorinfo();
      errorinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorinfo_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DownladResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownladResponse::CopyFrom(const DownladResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownladResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DownladResponse::Swap(DownladResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownladResponse::InternalSwap(DownladResponse* other) {
  std::swap(iserror_, other->iserror_);
  errorinfo_.Swap(&other->errorinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownladResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownladResponse_descriptor_;
  metadata.reflection = DownladResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownladResponse

// required int32 isError = 1;
 bool DownladResponse::has_iserror() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DownladResponse::set_has_iserror() {
  _has_bits_[0] |= 0x00000001u;
}
 void DownladResponse::clear_has_iserror() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DownladResponse::clear_iserror() {
  iserror_ = 0;
  clear_has_iserror();
}
 ::google::protobuf::int32 DownladResponse::iserror() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownladResponse.isError)
  return iserror_;
}
 void DownladResponse::set_iserror(::google::protobuf::int32 value) {
  set_has_iserror();
  iserror_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.DownladResponse.isError)
}

// optional string errorInfo = 2;
 bool DownladResponse::has_errorinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DownladResponse::set_has_errorinfo() {
  _has_bits_[0] |= 0x00000002u;
}
 void DownladResponse::clear_has_errorinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DownladResponse::clear_errorinfo() {
  errorinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errorinfo();
}
 const ::std::string& DownladResponse::errorinfo() const {
  // @@protoc_insertion_point(field_get:RCMMessage.DownladResponse.errorInfo)
  return errorinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownladResponse::set_errorinfo(const ::std::string& value) {
  set_has_errorinfo();
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.DownladResponse.errorInfo)
}
 void DownladResponse::set_errorinfo(const char* value) {
  set_has_errorinfo();
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.DownladResponse.errorInfo)
}
 void DownladResponse::set_errorinfo(const char* value, size_t size) {
  set_has_errorinfo();
  errorinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.DownladResponse.errorInfo)
}
 ::std::string* DownladResponse::mutable_errorinfo() {
  set_has_errorinfo();
  // @@protoc_insertion_point(field_mutable:RCMMessage.DownladResponse.errorInfo)
  return errorinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownladResponse::release_errorinfo() {
  clear_has_errorinfo();
  return errorinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownladResponse::set_allocated_errorinfo(::std::string* errorinfo) {
  if (errorinfo != NULL) {
    set_has_errorinfo();
  } else {
    clear_has_errorinfo();
  }
  errorinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorinfo);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.DownladResponse.errorInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ListRequest::kFileNameFieldNumber;
#endif  // !_MSC_VER

ListRequest::ListRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.ListRequest)
}

void ListRequest::InitAsDefaultInstance() {
}

ListRequest::ListRequest(const ListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.ListRequest)
}

void ListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRequest::~ListRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.ListRequest)
  SharedDtor();
}

void ListRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRequest_descriptor_;
}

const ListRequest& ListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

ListRequest* ListRequest::default_instance_ = NULL;

ListRequest* ListRequest::New(::google::protobuf::Arena* arena) const {
  ListRequest* n = new ListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRequest::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.ListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.ListRequest.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.ListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.ListRequest)
  return false;
#undef DO_
}

void ListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.ListRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListRequest.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.ListRequest)
}

::google::protobuf::uint8* ListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.ListRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.ListRequest.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.ListRequest)
  return target;
}

int ListRequest::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListRequest::Swap(ListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRequest::InternalSwap(ListRequest* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRequest_descriptor_;
  metadata.reflection = ListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRequest

// required string fileName = 1;
 bool ListRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ListRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void ListRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ListRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& ListRequest::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.ListRequest.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.ListRequest.fileName)
}
 void ListRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.ListRequest.fileName)
}
 void ListRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.ListRequest.fileName)
}
 ::std::string* ListRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.ListRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.ListRequest.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LisrResponse::kFileNameFieldNumber;
#endif  // !_MSC_VER

LisrResponse::LisrResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.LisrResponse)
}

void LisrResponse::InitAsDefaultInstance() {
}

LisrResponse::LisrResponse(const LisrResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.LisrResponse)
}

void LisrResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LisrResponse::~LisrResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.LisrResponse)
  SharedDtor();
}

void LisrResponse::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LisrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LisrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LisrResponse_descriptor_;
}

const LisrResponse& LisrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

LisrResponse* LisrResponse::default_instance_ = NULL;

LisrResponse* LisrResponse::New(::google::protobuf::Arena* arena) const {
  LisrResponse* n = new LisrResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LisrResponse::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LisrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.LisrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.LisrResponse.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.LisrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.LisrResponse)
  return false;
#undef DO_
}

void LisrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.LisrResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.LisrResponse.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.LisrResponse)
}

::google::protobuf::uint8* LisrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.LisrResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.LisrResponse.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.LisrResponse)
  return target;
}

int LisrResponse::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LisrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LisrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LisrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LisrResponse::MergeFrom(const LisrResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LisrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LisrResponse::CopyFrom(const LisrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LisrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LisrResponse::Swap(LisrResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LisrResponse::InternalSwap(LisrResponse* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LisrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LisrResponse_descriptor_;
  metadata.reflection = LisrResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LisrResponse

// required string fileName = 1;
 bool LisrResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void LisrResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void LisrResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void LisrResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& LisrResponse::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.LisrResponse.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LisrResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.LisrResponse.fileName)
}
 void LisrResponse::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.LisrResponse.fileName)
}
 void LisrResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.LisrResponse.fileName)
}
 ::std::string* LisrResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.LisrResponse.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LisrResponse::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LisrResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.LisrResponse.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SearchRequest::kFileNameFieldNumber;
#endif  // !_MSC_VER

SearchRequest::SearchRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.SearchRequest)
}

void SearchRequest::InitAsDefaultInstance() {
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:RCMMessage.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New(::google::protobuf::Arena* arena) const {
  SearchRequest* n = new SearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRequest::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.SearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.SearchRequest.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.SearchRequest)
  return false;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.SearchRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.SearchRequest.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.SearchRequest)
}

::google::protobuf::uint8* SearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.SearchRequest)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.SearchRequest.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.SearchRequest)
  return target;
}

int SearchRequest::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// required string fileName = 1;
 bool SearchRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SearchRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void SearchRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SearchRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& SearchRequest::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.SearchRequest.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.SearchRequest.fileName)
}
 void SearchRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.SearchRequest.fileName)
}
 void SearchRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.SearchRequest.fileName)
}
 ::std::string* SearchRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.SearchRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SearchRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.SearchRequest.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SearchResponse::kFileNameFieldNumber;
#endif  // !_MSC_VER

SearchResponse::SearchResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.SearchResponse)
}

void SearchResponse::InitAsDefaultInstance() {
}

SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.SearchResponse)
}

void SearchResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:RCMMessage.SearchResponse)
  SharedDtor();
}

void SearchResponse::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResponse_descriptor_;
}

const SearchResponse& SearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

SearchResponse* SearchResponse::default_instance_ = NULL;

SearchResponse* SearchResponse::New(::google::protobuf::Arena* arena) const {
  SearchResponse* n = new SearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResponse::Clear() {
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.SearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RCMMessage.SearchResponse.fileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.SearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.SearchResponse)
  return false;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.SearchResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.SearchResponse.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.SearchResponse)
}

::google::protobuf::uint8* SearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.SearchResponse)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RCMMessage.SearchResponse.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.SearchResponse)
  return target;
}

int SearchResponse::ByteSize() const {
  int total_size = 0;

  // required string fileName = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResponse::InternalSwap(SearchResponse* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResponse_descriptor_;
  metadata.reflection = SearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResponse

// required string fileName = 1;
 bool SearchResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SearchResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
 void SearchResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SearchResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& SearchResponse::filename() const {
  // @@protoc_insertion_point(field_get:RCMMessage.SearchResponse.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.SearchResponse.fileName)
}
 void SearchResponse::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.SearchResponse.fileName)
}
 void SearchResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.SearchResponse.fileName)
}
 ::std::string* SearchResponse::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:RCMMessage.SearchResponse.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SearchResponse::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.SearchResponse.fileName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Request::kUploadReqFieldNumber;
const int Request::kDownloadReqFieldNumber;
const int Request::kListReqFieldNumber;
const int Request::kSearchReqFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.Request)
}

void Request::InitAsDefaultInstance() {
  upload_req_ = const_cast< ::RCMMessage::UploadRequest*>(&::RCMMessage::UploadRequest::default_instance());
  download_req_ = const_cast< ::RCMMessage::DownloadRequest*>(&::RCMMessage::DownloadRequest::default_instance());
  list_req_ = const_cast< ::RCMMessage::ListRequest*>(&::RCMMessage::ListRequest::default_instance());
  search_req_ = const_cast< ::RCMMessage::SearchRequest*>(&::RCMMessage::SearchRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  upload_req_ = NULL;
  download_req_ = NULL;
  list_req_ = NULL;
  search_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:RCMMessage.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete upload_req_;
    delete download_req_;
    delete list_req_;
    delete search_req_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_upload_req()) {
      if (upload_req_ != NULL) upload_req_->::RCMMessage::UploadRequest::Clear();
    }
    if (has_download_req()) {
      if (download_req_ != NULL) download_req_->::RCMMessage::DownloadRequest::Clear();
    }
    if (has_list_req()) {
      if (list_req_ != NULL) list_req_->::RCMMessage::ListRequest::Clear();
    }
    if (has_search_req()) {
      if (search_req_ != NULL) search_req_->::RCMMessage::SearchRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCMMessage.UploadRequest upload_req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_download_req;
        break;
      }

      // optional .RCMMessage.DownloadRequest download_req = 2;
      case 2: {
        if (tag == 18) {
         parse_download_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_req;
        break;
      }

      // optional .RCMMessage.ListRequest list_req = 3;
      case 3: {
        if (tag == 26) {
         parse_list_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_search_req;
        break;
      }

      // optional .RCMMessage.SearchRequest search_req = 4;
      case 4: {
        if (tag == 34) {
         parse_search_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.Request)
  // optional .RCMMessage.UploadRequest upload_req = 1;
  if (has_upload_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->upload_req_, output);
  }

  // optional .RCMMessage.DownloadRequest download_req = 2;
  if (has_download_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->download_req_, output);
  }

  // optional .RCMMessage.ListRequest list_req = 3;
  if (has_list_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->list_req_, output);
  }

  // optional .RCMMessage.SearchRequest search_req = 4;
  if (has_search_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->search_req_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.Request)
  // optional .RCMMessage.UploadRequest upload_req = 1;
  if (has_upload_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->upload_req_, target);
  }

  // optional .RCMMessage.DownloadRequest download_req = 2;
  if (has_download_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->download_req_, target);
  }

  // optional .RCMMessage.ListRequest list_req = 3;
  if (has_list_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->list_req_, target);
  }

  // optional .RCMMessage.SearchRequest search_req = 4;
  if (has_search_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->search_req_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional .RCMMessage.UploadRequest upload_req = 1;
    if (has_upload_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upload_req_);
    }

    // optional .RCMMessage.DownloadRequest download_req = 2;
    if (has_download_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->download_req_);
    }

    // optional .RCMMessage.ListRequest list_req = 3;
    if (has_list_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->list_req_);
    }

    // optional .RCMMessage.SearchRequest search_req = 4;
    if (has_search_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->search_req_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upload_req()) {
      mutable_upload_req()->::RCMMessage::UploadRequest::MergeFrom(from.upload_req());
    }
    if (from.has_download_req()) {
      mutable_download_req()->::RCMMessage::DownloadRequest::MergeFrom(from.download_req());
    }
    if (from.has_list_req()) {
      mutable_list_req()->::RCMMessage::ListRequest::MergeFrom(from.list_req());
    }
    if (from.has_search_req()) {
      mutable_search_req()->::RCMMessage::SearchRequest::MergeFrom(from.search_req());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_upload_req()) {
    if (!this->upload_req_->IsInitialized()) return false;
  }
  if (has_download_req()) {
    if (!this->download_req_->IsInitialized()) return false;
  }
  if (has_list_req()) {
    if (!this->list_req_->IsInitialized()) return false;
  }
  if (has_search_req()) {
    if (!this->search_req_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(upload_req_, other->upload_req_);
  std::swap(download_req_, other->download_req_);
  std::swap(list_req_, other->list_req_);
  std::swap(search_req_, other->search_req_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .RCMMessage.UploadRequest upload_req = 1;
 bool Request::has_upload_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Request::set_has_upload_req() {
  _has_bits_[0] |= 0x00000001u;
}
 void Request::clear_has_upload_req() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Request::clear_upload_req() {
  if (upload_req_ != NULL) upload_req_->::RCMMessage::UploadRequest::Clear();
  clear_has_upload_req();
}
 const ::RCMMessage::UploadRequest& Request::upload_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.upload_req)
  return upload_req_ != NULL ? *upload_req_ : *default_instance_->upload_req_;
}
 ::RCMMessage::UploadRequest* Request::mutable_upload_req() {
  set_has_upload_req();
  if (upload_req_ == NULL) {
    upload_req_ = new ::RCMMessage::UploadRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.upload_req)
  return upload_req_;
}
 ::RCMMessage::UploadRequest* Request::release_upload_req() {
  clear_has_upload_req();
  ::RCMMessage::UploadRequest* temp = upload_req_;
  upload_req_ = NULL;
  return temp;
}
 void Request::set_allocated_upload_req(::RCMMessage::UploadRequest* upload_req) {
  delete upload_req_;
  upload_req_ = upload_req;
  if (upload_req) {
    set_has_upload_req();
  } else {
    clear_has_upload_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.upload_req)
}

// optional .RCMMessage.DownloadRequest download_req = 2;
 bool Request::has_download_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Request::set_has_download_req() {
  _has_bits_[0] |= 0x00000002u;
}
 void Request::clear_has_download_req() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Request::clear_download_req() {
  if (download_req_ != NULL) download_req_->::RCMMessage::DownloadRequest::Clear();
  clear_has_download_req();
}
 const ::RCMMessage::DownloadRequest& Request::download_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.download_req)
  return download_req_ != NULL ? *download_req_ : *default_instance_->download_req_;
}
 ::RCMMessage::DownloadRequest* Request::mutable_download_req() {
  set_has_download_req();
  if (download_req_ == NULL) {
    download_req_ = new ::RCMMessage::DownloadRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.download_req)
  return download_req_;
}
 ::RCMMessage::DownloadRequest* Request::release_download_req() {
  clear_has_download_req();
  ::RCMMessage::DownloadRequest* temp = download_req_;
  download_req_ = NULL;
  return temp;
}
 void Request::set_allocated_download_req(::RCMMessage::DownloadRequest* download_req) {
  delete download_req_;
  download_req_ = download_req;
  if (download_req) {
    set_has_download_req();
  } else {
    clear_has_download_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.download_req)
}

// optional .RCMMessage.ListRequest list_req = 3;
 bool Request::has_list_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Request::set_has_list_req() {
  _has_bits_[0] |= 0x00000004u;
}
 void Request::clear_has_list_req() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Request::clear_list_req() {
  if (list_req_ != NULL) list_req_->::RCMMessage::ListRequest::Clear();
  clear_has_list_req();
}
 const ::RCMMessage::ListRequest& Request::list_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.list_req)
  return list_req_ != NULL ? *list_req_ : *default_instance_->list_req_;
}
 ::RCMMessage::ListRequest* Request::mutable_list_req() {
  set_has_list_req();
  if (list_req_ == NULL) {
    list_req_ = new ::RCMMessage::ListRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.list_req)
  return list_req_;
}
 ::RCMMessage::ListRequest* Request::release_list_req() {
  clear_has_list_req();
  ::RCMMessage::ListRequest* temp = list_req_;
  list_req_ = NULL;
  return temp;
}
 void Request::set_allocated_list_req(::RCMMessage::ListRequest* list_req) {
  delete list_req_;
  list_req_ = list_req;
  if (list_req) {
    set_has_list_req();
  } else {
    clear_has_list_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.list_req)
}

// optional .RCMMessage.SearchRequest search_req = 4;
 bool Request::has_search_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Request::set_has_search_req() {
  _has_bits_[0] |= 0x00000008u;
}
 void Request::clear_has_search_req() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Request::clear_search_req() {
  if (search_req_ != NULL) search_req_->::RCMMessage::SearchRequest::Clear();
  clear_has_search_req();
}
 const ::RCMMessage::SearchRequest& Request::search_req() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Request.search_req)
  return search_req_ != NULL ? *search_req_ : *default_instance_->search_req_;
}
 ::RCMMessage::SearchRequest* Request::mutable_search_req() {
  set_has_search_req();
  if (search_req_ == NULL) {
    search_req_ = new ::RCMMessage::SearchRequest;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Request.search_req)
  return search_req_;
}
 ::RCMMessage::SearchRequest* Request::release_search_req() {
  clear_has_search_req();
  ::RCMMessage::SearchRequest* temp = search_req_;
  search_req_ = NULL;
  return temp;
}
 void Request::set_allocated_search_req(::RCMMessage::SearchRequest* search_req) {
  delete search_req_;
  search_req_ = search_req;
  if (search_req) {
    set_has_search_req();
  } else {
    clear_has_search_req();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Request.search_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Response::kResultFieldNumber;
const int Response::kErrorDescriptionFieldNumber;
const int Response::kLastBlockFieldNumber;
const int Response::kBlockIndexFieldNumber;
const int Response::kUploadResFieldNumber;
const int Response::kDownloadResFieldNumber;
const int Response::kListResFieldNumber;
const int Response::kSearchResFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.Response)
}

void Response::InitAsDefaultInstance() {
  upload_res_ = const_cast< ::RCMMessage::UploadResponse*>(&::RCMMessage::UploadResponse::default_instance());
  download_res_ = const_cast< ::RCMMessage::DownladResponse*>(&::RCMMessage::DownladResponse::default_instance());
  list_res_ = const_cast< ::RCMMessage::LisrResponse*>(&::RCMMessage::LisrResponse::default_instance());
  search_res_ = const_cast< ::RCMMessage::SearchResponse*>(&::RCMMessage::SearchResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  error_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_ = false;
  block_index_ = 0u;
  upload_res_ = NULL;
  download_res_ = NULL;
  list_res_ = NULL;
  search_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:RCMMessage.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  error_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete upload_res_;
    delete download_res_;
    delete list_res_;
    delete search_res_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_, block_index_);
    if (has_error_description()) {
      error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_upload_res()) {
      if (upload_res_ != NULL) upload_res_->::RCMMessage::UploadResponse::Clear();
    }
    if (has_download_res()) {
      if (download_res_ != NULL) download_res_->::RCMMessage::DownladResponse::Clear();
    }
    if (has_list_res()) {
      if (list_res_ != NULL) list_res_->::RCMMessage::LisrResponse::Clear();
    }
    if (has_search_res()) {
      if (search_res_ != NULL) search_res_->::RCMMessage::SearchResponse::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_description;
        break;
      }

      // optional bytes error_description = 2;
      case 2: {
        if (tag == 18) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_block;
        break;
      }

      // required bool last_block = 3;
      case 3: {
        if (tag == 24) {
         parse_last_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_block_)));
          set_has_last_block();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_block_index;
        break;
      }

      // required fixed32 block_index = 4;
      case 4: {
        if (tag == 37) {
         parse_block_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &block_index_)));
          set_has_block_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upload_res;
        break;
      }

      // optional .RCMMessage.UploadResponse upload_res = 5;
      case 5: {
        if (tag == 42) {
         parse_upload_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_download_res;
        break;
      }

      // optional .RCMMessage.DownladResponse download_res = 6;
      case 6: {
        if (tag == 50) {
         parse_download_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_list_res;
        break;
      }

      // optional .RCMMessage.LisrResponse list_res = 7;
      case 7: {
        if (tag == 58) {
         parse_list_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_search_res;
        break;
      }

      // optional .RCMMessage.SearchResponse search_res = 8;
      case 8: {
        if (tag == 66) {
         parse_search_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.Response)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional bytes error_description = 2;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_description(), output);
  }

  // required bool last_block = 3;
  if (has_last_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last_block(), output);
  }

  // required fixed32 block_index = 4;
  if (has_block_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->block_index(), output);
  }

  // optional .RCMMessage.UploadResponse upload_res = 5;
  if (has_upload_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->upload_res_, output);
  }

  // optional .RCMMessage.DownladResponse download_res = 6;
  if (has_download_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->download_res_, output);
  }

  // optional .RCMMessage.LisrResponse list_res = 7;
  if (has_list_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->list_res_, output);
  }

  // optional .RCMMessage.SearchResponse search_res = 8;
  if (has_search_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->search_res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.Response)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional bytes error_description = 2;
  if (has_error_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_description(), target);
  }

  // required bool last_block = 3;
  if (has_last_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last_block(), target);
  }

  // required fixed32 block_index = 4;
  if (has_block_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->block_index(), target);
  }

  // optional .RCMMessage.UploadResponse upload_res = 5;
  if (has_upload_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->upload_res_, target);
  }

  // optional .RCMMessage.DownladResponse download_res = 6;
  if (has_download_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->download_res_, target);
  }

  // optional .RCMMessage.LisrResponse list_res = 7;
  if (has_list_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->list_res_, target);
  }

  // optional .RCMMessage.SearchResponse search_res = 8;
  if (has_search_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->search_res_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.Response)
  return target;
}

int Response::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_result()) {
    // required bool result = 1;
    total_size += 1 + 1;
  }

  if (has_last_block()) {
    // required bool last_block = 3;
    total_size += 1 + 1;
  }

  if (has_block_index()) {
    // required fixed32 block_index = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Response::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bool result = 1;
    total_size += 1 + 1;

    // required bool last_block = 3;
    total_size += 1 + 1;

    // required fixed32 block_index = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 242) {
    // optional bytes error_description = 2;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_description());
    }

    // optional .RCMMessage.UploadResponse upload_res = 5;
    if (has_upload_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upload_res_);
    }

    // optional .RCMMessage.DownladResponse download_res = 6;
    if (has_download_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->download_res_);
    }

    // optional .RCMMessage.LisrResponse list_res = 7;
    if (has_list_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->list_res_);
    }

    // optional .RCMMessage.SearchResponse search_res = 8;
    if (has_search_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->search_res_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_description()) {
      set_has_error_description();
      error_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_description_);
    }
    if (from.has_last_block()) {
      set_last_block(from.last_block());
    }
    if (from.has_block_index()) {
      set_block_index(from.block_index());
    }
    if (from.has_upload_res()) {
      mutable_upload_res()->::RCMMessage::UploadResponse::MergeFrom(from.upload_res());
    }
    if (from.has_download_res()) {
      mutable_download_res()->::RCMMessage::DownladResponse::MergeFrom(from.download_res());
    }
    if (from.has_list_res()) {
      mutable_list_res()->::RCMMessage::LisrResponse::MergeFrom(from.list_res());
    }
    if (from.has_search_res()) {
      mutable_search_res()->::RCMMessage::SearchResponse::MergeFrom(from.search_res());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_upload_res()) {
    if (!this->upload_res_->IsInitialized()) return false;
  }
  if (has_download_res()) {
    if (!this->download_res_->IsInitialized()) return false;
  }
  if (has_list_res()) {
    if (!this->list_res_->IsInitialized()) return false;
  }
  if (has_search_res()) {
    if (!this->search_res_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(result_, other->result_);
  error_description_.Swap(&other->error_description_);
  std::swap(last_block_, other->last_block_);
  std::swap(block_index_, other->block_index_);
  std::swap(upload_res_, other->upload_res_);
  std::swap(download_res_, other->download_res_);
  std::swap(list_res_, other->list_res_);
  std::swap(search_res_, other->search_res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// required bool result = 1;
 bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Response::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
 void Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Response::clear_result() {
  result_ = false;
  clear_has_result();
}
 bool Response::result() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.result)
  return result_;
}
 void Response::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Response.result)
}

// optional bytes error_description = 2;
 bool Response::has_error_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Response::set_has_error_description() {
  _has_bits_[0] |= 0x00000002u;
}
 void Response::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Response::clear_error_description() {
  error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_description();
}
 const ::std::string& Response::error_description() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.error_description)
  return error_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_error_description(const ::std::string& value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RCMMessage.Response.error_description)
}
 void Response::set_error_description(const char* value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RCMMessage.Response.error_description)
}
 void Response::set_error_description(const void* value, size_t size) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RCMMessage.Response.error_description)
}
 ::std::string* Response::mutable_error_description() {
  set_has_error_description();
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.error_description)
  return error_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_error_description() {
  clear_has_error_description();
  return error_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_error_description(::std::string* error_description) {
  if (error_description != NULL) {
    set_has_error_description();
  } else {
    clear_has_error_description();
  }
  error_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_description);
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.error_description)
}

// required bool last_block = 3;
 bool Response::has_last_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Response::set_has_last_block() {
  _has_bits_[0] |= 0x00000004u;
}
 void Response::clear_has_last_block() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Response::clear_last_block() {
  last_block_ = false;
  clear_has_last_block();
}
 bool Response::last_block() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.last_block)
  return last_block_;
}
 void Response::set_last_block(bool value) {
  set_has_last_block();
  last_block_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Response.last_block)
}

// required fixed32 block_index = 4;
 bool Response::has_block_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Response::set_has_block_index() {
  _has_bits_[0] |= 0x00000008u;
}
 void Response::clear_has_block_index() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Response::clear_block_index() {
  block_index_ = 0u;
  clear_has_block_index();
}
 ::google::protobuf::uint32 Response::block_index() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.block_index)
  return block_index_;
}
 void Response::set_block_index(::google::protobuf::uint32 value) {
  set_has_block_index();
  block_index_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Response.block_index)
}

// optional .RCMMessage.UploadResponse upload_res = 5;
 bool Response::has_upload_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void Response::set_has_upload_res() {
  _has_bits_[0] |= 0x00000010u;
}
 void Response::clear_has_upload_res() {
  _has_bits_[0] &= ~0x00000010u;
}
 void Response::clear_upload_res() {
  if (upload_res_ != NULL) upload_res_->::RCMMessage::UploadResponse::Clear();
  clear_has_upload_res();
}
 const ::RCMMessage::UploadResponse& Response::upload_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.upload_res)
  return upload_res_ != NULL ? *upload_res_ : *default_instance_->upload_res_;
}
 ::RCMMessage::UploadResponse* Response::mutable_upload_res() {
  set_has_upload_res();
  if (upload_res_ == NULL) {
    upload_res_ = new ::RCMMessage::UploadResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.upload_res)
  return upload_res_;
}
 ::RCMMessage::UploadResponse* Response::release_upload_res() {
  clear_has_upload_res();
  ::RCMMessage::UploadResponse* temp = upload_res_;
  upload_res_ = NULL;
  return temp;
}
 void Response::set_allocated_upload_res(::RCMMessage::UploadResponse* upload_res) {
  delete upload_res_;
  upload_res_ = upload_res;
  if (upload_res) {
    set_has_upload_res();
  } else {
    clear_has_upload_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.upload_res)
}

// optional .RCMMessage.DownladResponse download_res = 6;
 bool Response::has_download_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void Response::set_has_download_res() {
  _has_bits_[0] |= 0x00000020u;
}
 void Response::clear_has_download_res() {
  _has_bits_[0] &= ~0x00000020u;
}
 void Response::clear_download_res() {
  if (download_res_ != NULL) download_res_->::RCMMessage::DownladResponse::Clear();
  clear_has_download_res();
}
 const ::RCMMessage::DownladResponse& Response::download_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.download_res)
  return download_res_ != NULL ? *download_res_ : *default_instance_->download_res_;
}
 ::RCMMessage::DownladResponse* Response::mutable_download_res() {
  set_has_download_res();
  if (download_res_ == NULL) {
    download_res_ = new ::RCMMessage::DownladResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.download_res)
  return download_res_;
}
 ::RCMMessage::DownladResponse* Response::release_download_res() {
  clear_has_download_res();
  ::RCMMessage::DownladResponse* temp = download_res_;
  download_res_ = NULL;
  return temp;
}
 void Response::set_allocated_download_res(::RCMMessage::DownladResponse* download_res) {
  delete download_res_;
  download_res_ = download_res;
  if (download_res) {
    set_has_download_res();
  } else {
    clear_has_download_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.download_res)
}

// optional .RCMMessage.LisrResponse list_res = 7;
 bool Response::has_list_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void Response::set_has_list_res() {
  _has_bits_[0] |= 0x00000040u;
}
 void Response::clear_has_list_res() {
  _has_bits_[0] &= ~0x00000040u;
}
 void Response::clear_list_res() {
  if (list_res_ != NULL) list_res_->::RCMMessage::LisrResponse::Clear();
  clear_has_list_res();
}
 const ::RCMMessage::LisrResponse& Response::list_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.list_res)
  return list_res_ != NULL ? *list_res_ : *default_instance_->list_res_;
}
 ::RCMMessage::LisrResponse* Response::mutable_list_res() {
  set_has_list_res();
  if (list_res_ == NULL) {
    list_res_ = new ::RCMMessage::LisrResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.list_res)
  return list_res_;
}
 ::RCMMessage::LisrResponse* Response::release_list_res() {
  clear_has_list_res();
  ::RCMMessage::LisrResponse* temp = list_res_;
  list_res_ = NULL;
  return temp;
}
 void Response::set_allocated_list_res(::RCMMessage::LisrResponse* list_res) {
  delete list_res_;
  list_res_ = list_res;
  if (list_res) {
    set_has_list_res();
  } else {
    clear_has_list_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.list_res)
}

// optional .RCMMessage.SearchResponse search_res = 8;
 bool Response::has_search_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void Response::set_has_search_res() {
  _has_bits_[0] |= 0x00000080u;
}
 void Response::clear_has_search_res() {
  _has_bits_[0] &= ~0x00000080u;
}
 void Response::clear_search_res() {
  if (search_res_ != NULL) search_res_->::RCMMessage::SearchResponse::Clear();
  clear_has_search_res();
}
 const ::RCMMessage::SearchResponse& Response::search_res() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Response.search_res)
  return search_res_ != NULL ? *search_res_ : *default_instance_->search_res_;
}
 ::RCMMessage::SearchResponse* Response::mutable_search_res() {
  set_has_search_res();
  if (search_res_ == NULL) {
    search_res_ = new ::RCMMessage::SearchResponse;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Response.search_res)
  return search_res_;
}
 ::RCMMessage::SearchResponse* Response::release_search_res() {
  clear_has_search_res();
  ::RCMMessage::SearchResponse* temp = search_res_;
  search_res_ = NULL;
  return temp;
}
 void Response::set_allocated_search_res(::RCMMessage::SearchResponse* search_res) {
  delete search_res_;
  search_res_ = search_res;
  if (search_res) {
    set_has_search_res();
  } else {
    clear_has_search_res();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Response.search_res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kSequenceFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCMMessage.Message)
}

void Message::InitAsDefaultInstance() {
  request_ = const_cast< ::RCMMessage::Request*>(&::RCMMessage::Request::default_instance());
  response_ = const_cast< ::RCMMessage::Response*>(&::RCMMessage::Response::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCMMessage.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 4097;
  sequence_ = 0u;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:RCMMessage.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCMMessage_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 4097;
    sequence_ = 0u;
    if (has_request()) {
      if (request_ != NULL) request_->::RCMMessage::Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::RCMMessage::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCMMessage.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RCMMessage.MSG type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCMMessage::MSG_IsValid(value)) {
            set_type(static_cast< ::RCMMessage::MSG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_sequence;
        break;
      }

      // required fixed32 sequence = 2;
      case 2: {
        if (tag == 21) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .RCMMessage.Request request = 3;
      case 3: {
        if (tag == 26) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_response;
        break;
      }

      // optional .RCMMessage.Response response = 4;
      case 4: {
        if (tag == 34) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCMMessage.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCMMessage.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCMMessage.Message)
  // required .RCMMessage.MSG type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sequence(), output);
  }

  // optional .RCMMessage.Request request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_, output);
  }

  // optional .RCMMessage.Response response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCMMessage.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCMMessage.Message)
  // required .RCMMessage.MSG type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required fixed32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sequence(), target);
  }

  // optional .RCMMessage.Request request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->request_, target);
  }

  // optional .RCMMessage.Response response = 4;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->response_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCMMessage.Message)
  return target;
}

int Message::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_type()) {
    // required .RCMMessage.MSG type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_sequence()) {
    // required fixed32 sequence = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int Message::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .RCMMessage.MSG type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required fixed32 sequence = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12) {
    // optional .RCMMessage.Request request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .RCMMessage.Response response = 4;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_request()) {
      mutable_request()->::RCMMessage::Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::RCMMessage::Response::MergeFrom(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  std::swap(sequence_, other->sequence_);
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .RCMMessage.MSG type = 1;
 bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
 void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Message::clear_type() {
  type_ = 4097;
  clear_has_type();
}
 ::RCMMessage::MSG Message::type() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.type)
  return static_cast< ::RCMMessage::MSG >(type_);
}
 void Message::set_type(::RCMMessage::MSG value) {
  assert(::RCMMessage::MSG_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Message.type)
}

// required fixed32 sequence = 2;
 bool Message::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Message::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
 void Message::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Message::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
 ::google::protobuf::uint32 Message::sequence() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.sequence)
  return sequence_;
}
 void Message::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:RCMMessage.Message.sequence)
}

// optional .RCMMessage.Request request = 3;
 bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Message::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
 void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Message::clear_request() {
  if (request_ != NULL) request_->::RCMMessage::Request::Clear();
  clear_has_request();
}
 const ::RCMMessage::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
 ::RCMMessage::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::RCMMessage::Request;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Message.request)
  return request_;
}
 ::RCMMessage::Request* Message::release_request() {
  clear_has_request();
  ::RCMMessage::Request* temp = request_;
  request_ = NULL;
  return temp;
}
 void Message::set_allocated_request(::RCMMessage::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Message.request)
}

// optional .RCMMessage.Response response = 4;
 bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void Message::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
 void Message::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
 void Message::clear_response() {
  if (response_ != NULL) response_->::RCMMessage::Response::Clear();
  clear_has_response();
}
 const ::RCMMessage::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:RCMMessage.Message.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
 ::RCMMessage::Response* Message::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::RCMMessage::Response;
  }
  // @@protoc_insertion_point(field_mutable:RCMMessage.Message.response)
  return response_;
}
 ::RCMMessage::Response* Message::release_response() {
  clear_has_response();
  ::RCMMessage::Response* temp = response_;
  response_ = NULL;
  return temp;
}
 void Message::set_allocated_response(::RCMMessage::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:RCMMessage.Message.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RCMMessage

// @@protoc_insertion_point(global_scope)
